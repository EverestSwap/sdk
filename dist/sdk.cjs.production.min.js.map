{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/router.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/fetcher.ts","../src/chains.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  ICE_MAINNET = 550,\r\n  ICE_ARCTIC = 552\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\n// TODO: replace ICE_MAINNET addresses when mainnet releases\r\nexport const contractAddresses = {\r\n  ICE_MAINNET: {\r\n    TOKEN: '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735',\r\n    FACTORY: '0x83962989A6138fB2D0B542f868b2FB4479379CCa',\r\n    ROUTER: '0x4256D3e5D65DeCC0D1c27C6495FCd84656c08F7B',\r\n    WICZ: '0xDbd5b8C9cF1e13d6eba4Cf05868F9dc20e093FE1',\r\n    CHEF: '0x089FCB09972FCa4578095Fa7C139e6F69ec85102',\r\n    AIRDROP: '0xd2B429f1460C2eE817d42f303A49AF1C19bc1e84',\r\n    MULTICALL: '0x25B52786664D9470F52648CCD2aD9F4E83722862'\r\n  },\r\n  ICE_ARCTIC: {\r\n    TOKEN: '0xCf3cd1A322fA7397588a48e6bC0eB2cDe56fe783',\r\n    FACTORY: '0x18FECf0be494D6ca90e302d08Fe4B5b6c51e5D4C',\r\n    ROUTER: '0x607Eac710146b6ee4Febca84E7326b217e0C5E1E',\r\n    WICZ: '0xCaD63cfFeBFE83A7b39773617403F8A42311e7b2',\r\n    CHEF: '0x6A21eE0519a3614161A60CD59887A9392b8b9FC1',\r\n    AIRDROP: '0x6e4D6C1c10DEBD2f938B6375dC28C4158b3c47fD',\r\n    MULTICALL: '0x25B52786664D9470F52648CCD2aD9F4E83722862'\r\n  }\r\n}\r\n\r\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.ICE_MAINNET]: contractAddresses.ICE_MAINNET.FACTORY,\r\n  [ChainId.ICE_ARCTIC]: contractAddresses.ICE_ARCTIC.FACTORY\r\n}\r\n\r\nexport const INIT_CODE_HASH = '0xd4cc97f7f1105b7d9084d4771a71f7c9772a5b9546b3736add1f2ebe94995713'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, CICZ, Percent, Trade } from './entities'\r\nimport { ChainId } from '.'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade,\r\n    options: TradeOptions | TradeOptionsDeadline,\r\n    chainId: ChainId = ChainId.ICE_MAINNET\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === CICZ[chainId]\r\n    const etherOut = trade.outputAmount.currency === CICZ[chainId]\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage, chainId))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage, chainId))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactICZForTokensSupportingFeeOnTransferTokens' : 'swapExactICZForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForICZSupportingFeeOnTransferTokens' : 'swapExactTokensForICZ'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapICZForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactICZ'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, CICZ } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   * @param chainId\r\n   */\r\n  public static ether(amount: BigintIsh, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    return new CurrencyAmount(CICZ[chainId], amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN, ChainId } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param chainId\r\n   */\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _997,\r\n  _1000,\r\n  ChainId\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.ICE_MAINNET): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS[chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId = ChainId.ICE_MAINNET) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\r\n      18,\r\n      'EVRSL',\r\n      'Everest Liquidity'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId = ChainId.ICE_MAINNET): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId = ChainId.ICE_MAINNET): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport invariant from 'tiny-invariant'\r\nimport EverestPair from './abis/EverestPair.json'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId = ChainId.ICE_MAINNET,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\r\n    const [reserves0, reserves1] = await new Contract(address, EverestPair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\r\n  }\r\n}\r\n","import { contractAddresses } from './constants'\r\n\r\ninterface StakingContract {\r\n  address: string\r\n  active: boolean\r\n  reward_token: string\r\n}\r\n\r\nexport interface Chain {\r\n  id: string\r\n  name: string\r\n  chain_id: number\r\n  mainnet: boolean\r\n  dex_is_live: boolean\r\n  tracked_by_debank: boolean\r\n  supported_by_gelato: boolean\r\n  rpc_uri: string\r\n  symbol: string\r\n  nativeCurrency: {\r\n    name: string\r\n    symbol: string\r\n    decimals: number\r\n  }\r\n  blockExplorerUrls?: string[]\r\n  token_symbol?: string\r\n  logo?: string\r\n  coingecko_id?: string\r\n  debank_everest_id?: string\r\n  contracts?: {\r\n    token: string\r\n    factory: string\r\n    router: string\r\n    wrapped_native_token: string\r\n    local_multisig?: string\r\n    community_treasury?: string\r\n    treasury_vester?: string\r\n    mini_chef?: string\r\n    timelock?: string\r\n    migrator?: string\r\n    airdrop?: string\r\n    foundation_multisig?: string\r\n    joint_multisig?: string\r\n    revenue_distributor?: string\r\n    governor?: string\r\n    fee_collector?: string\r\n    staking?: StakingContract[]\r\n  }\r\n}\r\n\r\nexport const ETHEREUM_MAINNET: Chain = {\r\n  id: 'ethereum_mainnet',\r\n  chain_id: 1,\r\n  name: 'Ethereum',\r\n  symbol: 'ETH',\r\n  mainnet: true,\r\n  logo: 'https://raw.githubusercontent.com/everestswap/sdk/master/src/images/chains/eth.png',\r\n  dex_is_live: false,\r\n  tracked_by_debank: true,\r\n  supported_by_gelato: true,\r\n  rpc_uri: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\r\n  coingecko_id: 'ethereum',\r\n  nativeCurrency: {\r\n    name: 'Ether',\r\n    symbol: 'ETH',\r\n    decimals: 18\r\n  },\r\n  blockExplorerUrls: ['https://etherscan.io']\r\n}\r\n\r\n// TODO: add RPC and explorer uri when mainnet is live\r\nexport const ICE_MAINNET: Chain = {\r\n  id: 'ice_mainnet',\r\n  chain_id: 550,\r\n  name: 'ICE Network',\r\n  symbol: 'ICZ',\r\n  token_symbol: 'EVRS',\r\n  mainnet: true,\r\n  dex_is_live: false,\r\n  tracked_by_debank: false,\r\n  supported_by_gelato: false,\r\n  rpc_uri: '',\r\n  contracts: {\r\n    token: contractAddresses.ICE_MAINNET.TOKEN,\r\n    factory: contractAddresses.ICE_MAINNET.FACTORY,\r\n    router: contractAddresses.ICE_MAINNET.ROUTER,\r\n    wrapped_native_token: contractAddresses.ICE_MAINNET.WICZ\r\n  },\r\n  nativeCurrency: {\r\n    name: 'ICZ',\r\n    symbol: 'ICZ',\r\n    decimals: 18\r\n  },\r\n  blockExplorerUrls: []\r\n}\r\n\r\nexport const ICE_ARCTIC: Chain = {\r\n  id: 'ice_arctic',\r\n  chain_id: 552,\r\n  name: 'Arctic Testnet',\r\n  symbol: 'ICZ',\r\n  token_symbol: 'EVRS',\r\n  mainnet: false,\r\n  dex_is_live: true,\r\n  tracked_by_debank: false,\r\n  supported_by_gelato: false,\r\n  rpc_uri: 'https://arctic-rpc.icenetwork.io:9933',\r\n  contracts: {\r\n    token: contractAddresses.ICE_ARCTIC.TOKEN,\r\n    factory: contractAddresses.ICE_ARCTIC.FACTORY,\r\n    router: contractAddresses.ICE_ARCTIC.ROUTER,\r\n    wrapped_native_token: contractAddresses.ICE_ARCTIC.WICZ\r\n  },\r\n  nativeCurrency: {\r\n    name: 'ICZ',\r\n    symbol: 'ICZ',\r\n    decimals: 18\r\n  },\r\n  blockExplorerUrls: ['https://arctic-blockscout.icenetwork.io']\r\n}\r\n\r\nexport const CHAINS: Chain[] = [ETHEREUM_MAINNET, ICE_MAINNET, ICE_ARCTIC]\r\n","import JSBI from 'jsbi'\r\nimport { ChainId } from '..'\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n\r\n  public static readonly CURRENCY = {\r\n    [ChainId.ICE_ARCTIC]: new Currency(18, 'ICZ', 'ICZ'),\r\n    [ChainId.ICE_MAINNET]: new Currency(18, 'ICZ', 'ICZ')\r\n  }\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst CICZ = Currency.CURRENCY\r\nexport { CICZ }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId, contractAddresses } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId = ChainId.ICE_MAINNET\r\n  public readonly address: string\r\n\r\n  public constructor(\r\n    chainId: ChainId = ChainId.ICE_MAINNET,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string\r\n  ) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\n// TODO: add mainnet address\r\nexport const WICZ = {\r\n  [ChainId.ICE_ARCTIC]: new Token(ChainId.ICE_ARCTIC, contractAddresses.ICE_ARCTIC.WICZ, 18, 'WICZ', 'Wrapped ICZ'),\r\n  [ChainId.ICE_MAINNET]: new Token(ChainId.ICE_MAINNET, contractAddresses.ICE_MAINNET.WICZ, 18, 'WICZ', 'Wrapped ICZ')\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { Currency, CICZ } from './currency'\r\nimport { Token, WICZ } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === CICZ[pairs[0].chainId] && pairs[0].involvesToken(WICZ[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === CICZ[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WICZ[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WICZ[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, CICZ } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WICZ } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === CICZ[chainId]) return new TokenAmount(WICZ[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId = ChainId.ICE_MAINNET): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === CICZ[chainId]) return WICZ[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  public readonly chainId: ChainId = ChainId.ICE_MAINNET\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route,\r\n    amount: CurrencyAmount,\r\n    tradeType: TradeType,\r\n    chainId: ChainId = ChainId.ICE_MAINNET\r\n  ) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], chainId)\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], chainId)\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === CICZ[chainId]\r\n        ? CurrencyAmount.ether(amounts[0].raw, chainId)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === CICZ[chainId]\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, chainId)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n    this.chainId = chainId\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT,\r\n            chainId\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT,\r\n            chainId\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","contractAddresses","ICE_MAINNET","TOKEN","FACTORY","ROUTER","WICZ","CHEF","AIRDROP","MULTICALL","ICE_ARCTIC","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","toHex","currencyAmount","raw","Router","swapCallParameters","trade","options","chainId","etherIn","inputAmount","currency","CICZ","etherOut","outputAmount","ttl","methodName","args","to","recipient","amountIn","maximumAmountIn","allowedSlippage","amountOut","minimumAmountOut","path","route","map","token","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","tradeType","EXACT_INPUT","EXACT_OUTPUT","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","this","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","decimals","ether","currencyEquals","toExact","TokenAmount","equals","Price","baseCurrency","quoteCurrency","scalar","fromRoute","prices","pairs","entries","pair","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","Token","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","sortsBefore","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputReserve","outputReserve","inputAmountWithFee","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE2","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE3","fetchPairData","EverestPair","getReserves","reserves0","reserves1","balances","ETHEREUM_MAINNET","id","chain_id","mainnet","logo","dex_is_live","tracked_by_debank","supported_by_gelato","rpc_uri","coingecko_id","nativeCurrency","blockExplorerUrls","token_symbol","contracts","factory","router","wrapped_native_token","CHAINS","Currency","toLowerCase","currencyA","currencyB","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","exactQuote","slippage","amounts","Array","nextPairs","i","nextPair","executionPrice","nextMidPrice","exactIn","exactOut","slippageTolerance","slippageAdjustedAmountOut","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError"],"mappings":"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"}