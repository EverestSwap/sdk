{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/router.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/fetcher.ts","../src/chains.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  ICE_MAINNET = 550,\r\n  ICE_ARCTIC = 552\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\n// TODO: replace ICE_MAINNET addresses when mainnet releases\r\nexport const contractAddresses = {\r\n  ICE_MAINNET: {\r\n    TOKEN: '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735',\r\n    FACTORY: '0x83962989A6138fB2D0B542f868b2FB4479379CCa',\r\n    ROUTER: '0x4256D3e5D65DeCC0D1c27C6495FCd84656c08F7B',\r\n    WICZ: '0xDbd5b8C9cF1e13d6eba4Cf05868F9dc20e093FE1',\r\n    CHEF: '0x089FCB09972FCa4578095Fa7C139e6F69ec85102',\r\n    AIRDROP: '0xd2B429f1460C2eE817d42f303A49AF1C19bc1e84',\r\n    MULTICALL: '0x25B52786664D9470F52648CCD2aD9F4E83722862'\r\n  },\r\n  ICE_ARCTIC: {\r\n    TOKEN: '0xCf3cd1A322fA7397588a48e6bC0eB2cDe56fe783',\r\n    FACTORY: '0x18FECf0be494D6ca90e302d08Fe4B5b6c51e5D4C',\r\n    ROUTER: '0x607Eac710146b6ee4Febca84E7326b217e0C5E1E',\r\n    WICZ: '0xCaD63cfFeBFE83A7b39773617403F8A42311e7b2',\r\n    CHEF: '0x6A21eE0519a3614161A60CD59887A9392b8b9FC1',\r\n    AIRDROP: '0x6e4D6C1c10DEBD2f938B6375dC28C4158b3c47fD',\r\n    MULTICALL: '0x25B52786664D9470F52648CCD2aD9F4E83722862'\r\n  }\r\n}\r\n\r\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\r\n  [ChainId.ICE_MAINNET]: contractAddresses.ICE_MAINNET.FACTORY,\r\n  [ChainId.ICE_ARCTIC]: contractAddresses.ICE_ARCTIC.FACTORY\r\n}\r\n\r\nexport const INIT_CODE_HASH = '0xd4cc97f7f1105b7d9084d4771a71f7c9772a5b9546b3736add1f2ebe94995713'\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, CICZ, Percent, Trade } from './entities'\r\nimport { ChainId } from '.'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade,\r\n    options: TradeOptions | TradeOptionsDeadline,\r\n    chainId: ChainId = ChainId.ICE_MAINNET\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency === CICZ[chainId]\r\n    const etherOut = trade.outputAmount.currency === CICZ[chainId]\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage, chainId))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage, chainId))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactICZForTokensSupportingFeeOnTransferTokens' : 'swapExactICZForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForICZSupportingFeeOnTransferTokens' : 'swapExactTokensForICZ'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapICZForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactICZ'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, CICZ } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   * @param chainId\r\n   */\r\n  public static ether(amount: BigintIsh, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    return new CurrencyAmount(CICZ[chainId], amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN, ChainId } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param chainId\r\n   */\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, chainId)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _997,\r\n  _1000,\r\n  ChainId\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token, chainId: ChainId = ChainId.ICE_MAINNET): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS[chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, chainId: ChainId = ChainId.ICE_MAINNET) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),\r\n      18,\r\n      'EVRSL',\r\n      'Everest Liquidity'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount, chainId: ChainId = ChainId.ICE_MAINNET): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount, chainId: ChainId = ChainId.ICE_MAINNET): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), chainId)]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport invariant from 'tiny-invariant'\r\nimport EverestPair from './abis/EverestPair.json'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId = ChainId.ICE_MAINNET,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId)\r\n    const [reserves0, reserves1] = await new Contract(address, EverestPair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), tokenA.chainId)\r\n  }\r\n}\r\n","import { contractAddresses } from './constants'\r\n\r\ninterface StakingContract {\r\n  address: string\r\n  active: boolean\r\n  reward_token: string\r\n}\r\n\r\nexport interface Chain {\r\n  id: string\r\n  name: string\r\n  chain_id: number\r\n  mainnet: boolean\r\n  dex_is_live: boolean\r\n  tracked_by_debank: boolean\r\n  supported_by_gelato: boolean\r\n  rpc_uri: string\r\n  symbol: string\r\n  nativeCurrency: {\r\n    name: string\r\n    symbol: string\r\n    decimals: number\r\n  }\r\n  blockExplorerUrls?: string[]\r\n  token_symbol?: string\r\n  logo?: string\r\n  coingecko_id?: string\r\n  debank_everest_id?: string\r\n  contracts?: {\r\n    token: string\r\n    factory: string\r\n    router: string\r\n    wrapped_native_token: string\r\n    local_multisig?: string\r\n    community_treasury?: string\r\n    treasury_vester?: string\r\n    mini_chef?: string\r\n    timelock?: string\r\n    migrator?: string\r\n    airdrop?: string\r\n    foundation_multisig?: string\r\n    joint_multisig?: string\r\n    revenue_distributor?: string\r\n    governor?: string\r\n    fee_collector?: string\r\n    staking?: StakingContract[]\r\n  }\r\n}\r\n\r\nexport const ETHEREUM_MAINNET: Chain = {\r\n  id: 'ethereum_mainnet',\r\n  chain_id: 1,\r\n  name: 'Ethereum',\r\n  symbol: 'ETH',\r\n  mainnet: true,\r\n  logo: 'https://raw.githubusercontent.com/everestswap/sdk/master/src/images/chains/eth.png',\r\n  dex_is_live: false,\r\n  tracked_by_debank: true,\r\n  supported_by_gelato: true,\r\n  rpc_uri: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\r\n  coingecko_id: 'ethereum',\r\n  nativeCurrency: {\r\n    name: 'Ether',\r\n    symbol: 'ETH',\r\n    decimals: 18\r\n  },\r\n  blockExplorerUrls: ['https://etherscan.io']\r\n}\r\n\r\n// TODO: add RPC and explorer uri when mainnet is live\r\nexport const ICE_MAINNET: Chain = {\r\n  id: 'ice_mainnet',\r\n  chain_id: 550,\r\n  name: 'ICE Network',\r\n  symbol: 'ICZ',\r\n  token_symbol: 'EVRS',\r\n  mainnet: true,\r\n  dex_is_live: false,\r\n  tracked_by_debank: false,\r\n  supported_by_gelato: false,\r\n  rpc_uri: '',\r\n  contracts: {\r\n    token: contractAddresses.ICE_MAINNET.TOKEN,\r\n    factory: contractAddresses.ICE_MAINNET.FACTORY,\r\n    router: contractAddresses.ICE_MAINNET.ROUTER,\r\n    wrapped_native_token: contractAddresses.ICE_MAINNET.WICZ\r\n  },\r\n  nativeCurrency: {\r\n    name: 'ICZ',\r\n    symbol: 'ICZ',\r\n    decimals: 18\r\n  },\r\n  blockExplorerUrls: []\r\n}\r\n\r\nexport const ICE_ARCTIC: Chain = {\r\n  id: 'ice_arctic',\r\n  chain_id: 552,\r\n  name: 'Arctic Testnet',\r\n  symbol: 'ICZ',\r\n  token_symbol: 'EVRS',\r\n  mainnet: false,\r\n  dex_is_live: true,\r\n  tracked_by_debank: false,\r\n  supported_by_gelato: false,\r\n  rpc_uri: 'https://arctic-rpc.icenetwork.io:9933',\r\n  contracts: {\r\n    token: contractAddresses.ICE_ARCTIC.TOKEN,\r\n    factory: contractAddresses.ICE_ARCTIC.FACTORY,\r\n    router: contractAddresses.ICE_ARCTIC.ROUTER,\r\n    wrapped_native_token: contractAddresses.ICE_ARCTIC.WICZ\r\n  },\r\n  nativeCurrency: {\r\n    name: 'ICZ',\r\n    symbol: 'ICZ',\r\n    decimals: 18\r\n  },\r\n  blockExplorerUrls: ['https://arctic-blockscout.icenetwork.io']\r\n}\r\n\r\nexport const CHAINS: Chain[] = [ETHEREUM_MAINNET, ICE_MAINNET, ICE_ARCTIC]\r\n","import JSBI from 'jsbi'\r\nimport { ChainId } from '..'\r\nimport { SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n\r\n  public static readonly CURRENCY = {\r\n    [ChainId.ICE_ARCTIC]: new Currency(18, 'ICZ', 'ICZ'),\r\n    [ChainId.ICE_MAINNET]: new Currency(18, 'ICZ', 'ICZ')\r\n  }\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst CICZ = Currency.CURRENCY\r\nexport { CICZ }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId, contractAddresses } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId = ChainId.ICE_MAINNET\r\n  public readonly address: string\r\n\r\n  public constructor(\r\n    chainId: ChainId = ChainId.ICE_MAINNET,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string\r\n  ) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\n// TODO: add mainnet address\r\nexport const WICZ = {\r\n  [ChainId.ICE_ARCTIC]: new Token(ChainId.ICE_ARCTIC, contractAddresses.ICE_ARCTIC.WICZ, 18, 'WICZ', 'Wrapped ICZ'),\r\n  [ChainId.ICE_MAINNET]: new Token(ChainId.ICE_MAINNET, contractAddresses.ICE_MAINNET.WICZ, 18, 'WICZ', 'Wrapped ICZ')\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { Currency, CICZ } from './currency'\r\nimport { Token, WICZ } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === CICZ[pairs[0].chainId] && pairs[0].involvesToken(WICZ[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === CICZ[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WICZ[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WICZ[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, CICZ } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WICZ } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === CICZ[chainId]) return new TokenAmount(WICZ[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId = ChainId.ICE_MAINNET): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === CICZ[chainId]) return WICZ[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  public readonly chainId: ChainId = ChainId.ICE_MAINNET\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT, chainId)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount, chainId: ChainId = ChainId.ICE_MAINNET): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT, chainId)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route,\r\n    amount: CurrencyAmount,\r\n    tradeType: TradeType,\r\n    chainId: ChainId = ChainId.ICE_MAINNET\r\n  ) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], chainId)\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], chainId)\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === CICZ[chainId]\r\n        ? CurrencyAmount.ether(amounts[0].raw, chainId)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === CICZ[chainId]\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, chainId)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n    this.chainId = chainId\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent, chainId: ChainId = ChainId.ICE_MAINNET): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn, chainId)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT,\r\n            chainId\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut, chainId)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT,\r\n            chainId\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","contractAddresses","ICE_MAINNET","TOKEN","FACTORY","ROUTER","WICZ","CHEF","AIRDROP","MULTICALL","ICE_ARCTIC","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","toHex","currencyAmount","raw","ZERO_HEX","Router","swapCallParameters","trade","options","chainId","etherIn","inputAmount","currency","CICZ","etherOut","outputAmount","ttl","to","recipient","amountIn","maximumAmountIn","allowedSlippage","amountOut","minimumAmountOut","path","route","map","token","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","tradeType","EXACT_INPUT","EXACT_OUTPUT","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","other","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","decimals","ether","currencyEquals","toExact","TokenAmount","equals","Price","baseCurrency","quoteCurrency","scalar","fromRoute","prices","pairs","entries","i","pair","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","Token","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","sortsBefore","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputReserve","outputReserve","inputAmountWithFee","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","EverestPair","abi","getReserves","reserves0","reserves1","balances","ETHEREUM_MAINNET","id","chain_id","mainnet","logo","dex_is_live","tracked_by_debank","supported_by_gelato","rpc_uri","coingecko_id","nativeCurrency","blockExplorerUrls","token_symbol","contracts","factory","router","wrapped_native_token","CHAINS","Currency","CURRENCY","toLowerCase","currencyA","currencyB","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","amounts","Array","nextPairs","nextPair","executionPrice","nextMidPrice","exactIn","exactOut","slippageTolerance","slippageAdjustedAmountOut","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError"],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,WAAYA;AACVA,EAAAA,qCAAA,gBAAA;AACAA,EAAAA,oCAAA,eAAA;AACD,CAHD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;AAKA,WAAYC;AACVA,EAAAA,uCAAA,gBAAA;AACAA,EAAAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;AACVA,EAAAA,oCAAA,eAAA;AACAA,EAAAA,uCAAA,kBAAA;AACAA,EAAAA,kCAAA,aAAA;AACD,CAJD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;;IAOaC,iBAAiB,GAAG;AAC/BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,4CADI;AAEXC,IAAAA,OAAO,EAAE,4CAFE;AAGXC,IAAAA,MAAM,EAAE,4CAHG;AAIXC,IAAAA,IAAI,EAAE,4CAJK;AAKXC,IAAAA,IAAI,EAAE,4CALK;AAMXC,IAAAA,OAAO,EAAE,4CANE;AAOXC,IAAAA,SAAS,EAAE;AAPA,GADkB;AAU/BC,EAAAA,UAAU,EAAE;AACVP,IAAAA,KAAK,EAAE,4CADG;AAEVC,IAAAA,OAAO,EAAE,4CAFC;AAGVC,IAAAA,MAAM,EAAE,4CAHE;AAIVC,IAAAA,IAAI,EAAE,4CAJI;AAKVC,IAAAA,IAAI,EAAE,4CALI;AAMVC,IAAAA,OAAO,EAAE,4CANC;AAOVC,IAAAA,SAAS,EAAE;AAPD;AAVmB;IAqBpBE,eAAe,4CACzBb,eAAO,CAACI,WADiB,IACHD,iBAAiB,CAACC,WAAlB,CAA8BE,OAD3B,mBAEzBN,eAAO,CAACY,UAFiB,IAEJT,iBAAiB,CAACS,UAAlB,CAA6BN,OAFzB;IAKfQ,cAAc,GAAG;IAEjBC,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ;;AAG1B,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAd;AACA,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAZ;AACA,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMQ,IAAI,gBAAGT,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMS,KAAK,gBAAGV,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AAEP,IAAYU,YAAZ;;AAAA,WAAYA;AACVA,EAAAA,qBAAA,UAAA;AACAA,EAAAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTb,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BU,YAAY,CAACG,OAFiB,iBAEPd,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEP;AACA,IAAMc,iBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,yBAAb;AAAA;;AAGE;;;AACE;AAHc,qCAAA,GAAoC,IAApC;AAId,UAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,wEAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAA+CC,KAA/C;AAUA;;;;;AAIA,IAAaC,4BAAb;AAAA;;AAGE;;;AACE;AAHc,yCAAA,GAAuC,IAAvC;AAId,WAAKL,IAAL,GAAY,OAAKC,WAAL,CAAiBD,IAA7B;AACA,QAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,iCAA4B,2EAAWC,SAAvC;;AACxB;;AAPH;AAAA,iCAAkDC,KAAlD;;SCdgBE,6BAA6BC,OAAaC;AACxD,GAAU1B,IAAI,CAAC2B,kBAAL,CAAwBF,KAAxB,EAA+BvB,IAA/B,CAAV,IAAA0B,SAAS,QAA0CH,KAA1C,kBAA4DC,YAA5D,OAAT,CAAA;AACA,GAAU1B,IAAI,CAAC6B,eAAL,CAAqBJ,KAArB,EAA4Bb,oBAAoB,CAACc,YAAD,CAAhD,CAAV,IAAAE,SAAS,QAAqEH,KAArE,kBAAuFC,YAAvF,OAAT,CAAA;AACD;;AAGD,SAAgBI,wBAAwBC;AACtC,MAAI;AACF,QAAMC,kBAAkB,GAAGC,kBAAU,CAACF,SAAD,CAArC;AACA,qCAAAG,OAAO,CAACH,SAAO,KAAKC,kBAAb,EAAoCD,SAApC,0BAAP;AACA,WAAOC,kBAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACd,MAAAP,SAAS,QAAWG,SAAX,8BAAT,CAAA;AACD;AACF;AAED,SAAgBK,eAAeC;AAC7B,SAAOA,SAAS,YAAYrC,IAArB,GACHqC,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACArC,IAAI,CAACC,MAAL,CAAYoC,SAAS,CAACC,QAAV,EAAZ,CADA,GAEAtC,IAAI,CAACC,MAAL,CAAYoC,SAAZ,CAJJ;AAKD;;AAGD,SAAgBE,KAAKC;AACnBhB,EAAAA,4BAA4B,CAACgB,CAAD,EAAI7B,YAAY,CAACG,OAAjB,CAA5B;AACA,MAAI2B,CAAC,GAASvC,IAAd;AACA,MAAIwC,CAAJ;;AACA,MAAI1C,IAAI,CAAC2C,WAAL,CAAiBH,CAAjB,EAAoBnC,KAApB,CAAJ,EAAgC;AAC9BoC,IAAAA,CAAC,GAAGD,CAAJ;AACAE,IAAAA,CAAC,GAAG1C,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAAC6C,MAAL,CAAYL,CAAZ,EAAepC,GAAf,CAAT,EAA8BD,GAA9B,CAAJ;;AACA,WAAOH,IAAI,CAAC8C,QAAL,CAAcJ,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;AAC1BA,MAAAA,CAAC,GAAGC,CAAJ;AACAA,MAAAA,CAAC,GAAG1C,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAAC6C,MAAL,CAAYL,CAAZ,EAAeE,CAAf,CAAT,EAA4BA,CAA5B,CAAZ,EAA4CtC,GAA5C,CAAJ;AACD;AACF,GAPD,MAOO,IAAIJ,IAAI,CAAC+C,QAAL,CAAcP,CAAd,EAAiBtC,IAAjB,CAAJ,EAA4B;AACjCuC,IAAAA,CAAC,GAAGtC,GAAJ;AACD;;AACD,SAAOsC,CAAP;AACD;AAGD;;AACA,SAAgBO,aAAgBC,OAAYL,KAAQM,SAAiBC;AACnE,IAAUD,OAAO,GAAG,CAApB,KAAAtB,SAAS,QAAc,eAAd,CAAT,CAAA;;AAEA,IAAUqB,KAAK,CAACG,MAAN,IAAgBF,OAA1B,KAAAtB,SAAS,QAA0B,YAA1B,CAAT,CAAA;;AAGA,MAAIqB,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtBH,IAAAA,KAAK,CAACI,IAAN,CAAWT,GAAX;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,QAAMU,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;AAGL,QAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0BR,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;AAC3D,aAAOA,GAAP;AACD;;AAED,QAAIW,EAAE,GAAG,CAAT;AAAA,QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;AAGA,WAAOG,EAAE,GAAGC,EAAZ,EAAgB;AACd,UAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;AACA,UAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAab,GAAb,CAAV,IAA+B,CAAnC,EAAsC;AACpCW,QAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACD,OAFD,MAEO;AACLD,QAAAA,EAAE,GAAGC,GAAL;AACD;AACF;;AACDR,IAAAA,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBX,GAApB;AACA,WAAOU,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;AACD;AACF;;ACxBD,SAASC,KAAT,CAAeC,cAAf;AACE,gBAAYA,cAAc,CAACC,GAAf,CAAmBxB,QAAnB,CAA4B,EAA5B,CAAZ;AACD;;AAED,IAAMyB,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB;AACE;;;AAGA;AACA;;;;;;;AALF,SAUgBC,kBAVhB,GAUS,4BACLC,KADK,EAELC,OAFK,EAGLC,OAHK;QAGLA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAE3B,QAAMiF,OAAO,GAAGH,KAAK,CAACI,WAAN,CAAkBC,QAAlB,KAA+BC,IAAI,CAACJ,OAAD,CAAnD;AACA,QAAMK,QAAQ,GAAGP,KAAK,CAACQ,YAAN,CAAmBH,QAAnB,KAAgCC,IAAI,CAACJ,OAAD,CAArD;;AAEA,KAAU,EAAEC,OAAO,IAAII,QAAb,CAAV,IAAA7C,SAAS,QAAyB,cAAzB,CAAT,CAAA;AACA,MAAU,EAAE,SAASuC,OAAX,KAAuBA,OAAO,CAACQ,GAAR,GAAc,CAA/C,KAAA/C,SAAS,QAAyC,KAAzC,CAAT,CAAA;AAEA,QAAMgD,EAAE,GAAW9C,uBAAuB,CAACqC,OAAO,CAACU,SAAT,CAA1C;AACA,QAAMC,QAAQ,GAAWlB,KAAK,CAACM,KAAK,CAACa,eAAN,CAAsBZ,OAAO,CAACa,eAA9B,EAA+CZ,OAA/C,CAAD,CAA9B;AACA,QAAMa,SAAS,GAAWrB,KAAK,CAACM,KAAK,CAACgB,gBAAN,CAAuBf,OAAO,CAACa,eAA/B,EAAgDZ,OAAhD,CAAD,CAA/B;AACA,QAAMe,IAAI,GAAajB,KAAK,CAACkB,KAAN,CAAYD,IAAZ,CAAiBE,GAAjB,CAAqB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACvD,OAAV;AAAA,KAA1B,CAAvB;AACA,QAAMwD,QAAQ,GACZ,SAASpB,OAAT,UACS,CAACqB,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,IAA0CxB,OAAO,CAACQ,GAAnD,EAAwDrC,QAAxD,CAAiE,EAAjE,CADT,UAES6B,OAAO,CAACoB,QAAR,CAAiBjD,QAAjB,CAA0B,EAA1B,CAHX;AAKA,QAAMsD,gBAAgB,GAAGC,OAAO,CAAC1B,OAAO,CAAC2B,aAAT,CAAhC;AAEA,QAAIC,UAAJ;AACA,QAAIC,IAAJ;AACA,QAAIvE,KAAJ;;AACA,YAAQyC,KAAK,CAAC+B,SAAd;AACE,WAAKhH,iBAAS,CAACiH,WAAf;AACE,YAAI7B,OAAJ,EAAa;AACX0B,UAAAA,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADW;;AAGXI,UAAAA,IAAI,GAAG,CAACf,SAAD,EAAYE,IAAZ,EAAkBP,EAAlB,EAAsBW,QAAtB,CAAP;AACA9D,UAAAA,KAAK,GAAGqD,QAAR;AACD,SALD,MAKO,IAAIL,QAAJ,EAAc;AACnBsB,UAAAA,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvF,CADmB;;AAGnBI,UAAAA,IAAI,GAAG,CAAClB,QAAD,EAAWG,SAAX,EAAsBE,IAAtB,EAA4BP,EAA5B,EAAgCW,QAAhC,CAAP;AACA9D,UAAAA,KAAK,GAAGsC,QAAR;AACD,SALM,MAKA;AACLgC,UAAAA,UAAU,GAAGH,gBAAgB,GACzB,uDADyB,GAEzB,0BAFJ,CADK;;AAKLI,UAAAA,IAAI,GAAG,CAAClB,QAAD,EAAWG,SAAX,EAAsBE,IAAtB,EAA4BP,EAA5B,EAAgCW,QAAhC,CAAP;AACA9D,UAAAA,KAAK,GAAGsC,QAAR;AACD;;AACD;;AACF,WAAK9E,iBAAS,CAACkH,YAAf;AACE,SAAU,CAACP,gBAAX,IAAAhE,SAAS,QAAoB,eAApB,CAAT,CAAA;;AACA,YAAIyC,OAAJ,EAAa;AACX0B,UAAAA,UAAU,GAAG,uBAAb,CADW;;AAGXC,UAAAA,IAAI,GAAG,CAACf,SAAD,EAAYE,IAAZ,EAAkBP,EAAlB,EAAsBW,QAAtB,CAAP;AACA9D,UAAAA,KAAK,GAAGqD,QAAR;AACD,SALD,MAKO,IAAIL,QAAJ,EAAc;AACnBsB,UAAAA,UAAU,GAAG,uBAAb,CADmB;;AAGnBC,UAAAA,IAAI,GAAG,CAACf,SAAD,EAAYH,QAAZ,EAAsBK,IAAtB,EAA4BP,EAA5B,EAAgCW,QAAhC,CAAP;AACA9D,UAAAA,KAAK,GAAGsC,QAAR;AACD,SALM,MAKA;AACLgC,UAAAA,UAAU,GAAG,0BAAb,CADK;;AAGLC,UAAAA,IAAI,GAAG,CAACf,SAAD,EAAYH,QAAZ,EAAsBK,IAAtB,EAA4BP,EAA5B,EAAgCW,QAAhC,CAAP;AACA9D,UAAAA,KAAK,GAAGsC,QAAR;AACD;;AACD;AAvCJ;;AAyCA,WAAO;AACLgC,MAAAA,UAAU,EAAVA,UADK;AAELC,MAAAA,IAAI,EAAJA,IAFK;AAGLvE,MAAAA,KAAK,EAALA;AAHK,KAAP;AAKD,GAjFH;;AAAA;AAAA;;;ACxDA,IAAM2E,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxBvH,gBAAQ,CAACwH,UADe,IACFN,OAAO,CAACM,UADN,wBAExBxH,gBAAQ,CAACyH,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxBzH,gBAAQ,CAAC0H,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClB3H,gBAAQ,CAACwH,UADS,KAAA,mBAElBxH,gBAAQ,CAACyH,aAFS,KAAA,mBAGlBzH,gBAAQ,CAAC0H,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;AAIE,oBAAmBC,SAAnB,EAAyCC,WAAzC;QAAyCA;AAAAA,MAAAA,cAAyB7G;;;AAChE,SAAK4G,SAAL,GAAiB3E,cAAc,CAAC2E,SAAD,CAA/B;AACA,SAAKC,WAAL,GAAmB5E,cAAc,CAAC4E,WAAD,CAAjC;AACD,GAPH;;;AAAA;;AAAA,SAmBSC,MAnBT,GAmBS;AACL,WAAO,IAAIH,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;AACD,GArBH;;AAAA,SAuBSnE,GAvBT,GAuBS,aAAIsE,KAAJ;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;;AACA,QAAIlH,IAAI,CAACoH,KAAL,CAAW,KAAKJ,WAAhB,EAA6BG,WAAW,CAACH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa9G,IAAI,CAAC4C,GAAL,CAAS,KAAKmE,SAAd,EAAyBI,WAAW,CAACJ,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL9G,IAAI,CAAC4C,GAAL,CACE5C,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADF,EAEEhH,IAAI,CAACqH,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLhH,IAAI,CAACqH,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CALK,CAAP;AAOD,GAnCH;;AAAA,SAqCSM,QArCT,GAqCS,kBAASJ,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;;AACA,QAAIlH,IAAI,CAACoH,KAAL,CAAW,KAAKJ,WAAhB,EAA6BG,WAAW,CAACH,WAAzC,CAAJ,EAA2D;AACzD,aAAO,IAAIF,QAAJ,CAAa9G,IAAI,CAACsH,QAAL,CAAc,KAAKP,SAAnB,EAA8BI,WAAW,CAACJ,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;AACD;;AACD,WAAO,IAAIF,QAAJ,CACL9G,IAAI,CAACsH,QAAL,CACEtH,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADF,EAEEhH,IAAI,CAACqH,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKLhH,IAAI,CAACqH,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CALK,CAAP;AAOD,GAjDH;;AAAA,SAmDSlE,QAnDT,GAmDS,kBAASoE,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;AACA,WAAOlH,IAAI,CAAC8C,QAAL,CACL9C,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhH,IAAI,CAACqH,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzDH;;AAAA,SA2DSO,OA3DT,GA2DS,iBAAQL,KAAR;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;AACA,WAAOlH,IAAI,CAACoH,KAAL,CACLpH,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhH,IAAI,CAACqH,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAjEH;;AAAA,SAmESrE,WAnET,GAmES,qBAAYuE,KAAZ;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;AACA,WAAOlH,IAAI,CAAC2C,WAAL,CACL3C,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhH,IAAI,CAACqH,QAAL,CAAcF,WAAW,CAACJ,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;AAID,GAzEH;;AAAA,SA2ESK,QA3ET,GA2ES,kBAASH,KAAT;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIJ,QAAJ,CACL9G,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACJ,SAA1C,CADK,EAEL/G,IAAI,CAACqH,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACH,WAA5C,CAFK,CAAP;AAID,GAjFH;;AAAA,SAmFSnE,MAnFT,GAmFS,gBAAOqE,KAAP;AACL,QAAMC,WAAW,GAAGD,KAAK,YAAYJ,QAAjB,GAA4BI,KAA5B,GAAoC,IAAIJ,QAAJ,CAAa1E,cAAc,CAAC8E,KAAD,CAA3B,CAAxD;AACA,WAAO,IAAIJ,QAAJ,CACL9G,IAAI,CAACqH,QAAL,CAAc,KAAKN,SAAnB,EAA8BI,WAAW,CAACH,WAA1C,CADK,EAELhH,IAAI,CAACqH,QAAL,CAAc,KAAKL,WAAnB,EAAgCG,WAAW,CAACJ,SAA5C,CAFK,CAAP;AAID,GAzFH;;AAAA,SA2FSS,aA3FT,GA2FS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBzI,gBAAQ,CAACyH;;;AAE9B,KAAUkB,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,IAAA7F,SAAS,QAAyC6F,iBAAzC,yBAAT,CAAA;AACA,MAAUA,iBAAiB,GAAG,CAA9B,KAAA7F,SAAS,QAA2B6F,iBAA3B,uBAAT,CAAA;AAEArB,IAAAA,OAAO,CAAC2B,GAAR,CAAY;AAAEC,MAAAA,SAAS,EAAEP,iBAAiB,GAAG,CAAjC;AAAoCE,MAAAA,QAAQ,EAAElB,qBAAqB,CAACkB,QAAD;AAAnE,KAAZ;AACA,QAAMM,QAAQ,GAAG,IAAI7B,OAAJ,CAAY,KAAKW,SAAL,CAAezE,QAAf,EAAZ,EACd4F,GADc,CACV,KAAKlB,WAAL,CAAiB1E,QAAjB,EADU,EAEd6F,mBAFc,CAEMV,iBAFN,CAAjB;AAGA,WAAOQ,QAAQ,CAAC5B,QAAT,CAAkB4B,QAAQ,CAACG,aAAT,EAAlB,EAA4CV,MAA5C,CAAP;AACD,GAxGH;;AAAA,SA0GSW,OA1GT,GA0GS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QAELD;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;QACjBD;AAAAA,MAAAA,WAAqBzI,gBAAQ,CAACyH;;;AAE9B,KAAUkB,MAAM,CAACC,SAAP,CAAiBM,aAAjB,CAAV,IAAAxG,SAAS,QAAqCwG,aAArC,yBAAT,CAAA;AACA,MAAUA,aAAa,IAAI,CAA3B,KAAAxG,SAAS,QAAwBwG,aAAxB,mBAAT,CAAA;AAEA7B,IAAAA,GAAG,CAAC+B,EAAJ,GAASF,aAAT;AACA7B,IAAAA,GAAG,CAACgC,EAAJ,GAAS1B,eAAe,CAACc,QAAD,CAAxB;AACA,WAAO,IAAIpB,GAAJ,CAAQ,KAAKQ,SAAL,CAAezE,QAAf,EAAR,EAAmC4F,GAAnC,CAAuC,KAAKlB,WAAL,CAAiB1E,QAAjB,EAAvC,EAAoE+D,QAApE,CAA6E+B,aAA7E,EAA4FV,MAA5F,CAAP;AACD,GArHH;;AAAA;AAAA;AAAA,SAUE;AACE,aAAO1H,IAAI,CAAC6C,MAAL,CAAY,KAAKkE,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;AACD,KAZH;;AAAA;AAAA;AAAA,SAeE;AACE,aAAO,IAAIF,QAAJ,CAAa9G,IAAI,CAACwI,SAAL,CAAe,KAAKzB,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;AACD;AAjBH;;AAAA;AAAA;;ACfA,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAaiC,cAAb;AAAA;;AAYE;AACA,0BAAsBlE,QAAtB,EAA0CmE,MAA1C;;;AACE,QAAMC,YAAY,GAAGvG,cAAc,CAACsG,MAAD,CAAnC;AACAlH,IAAAA,4BAA4B,CAACmH,YAAD,EAAehI,YAAY,CAACG,OAA5B,CAA5B;AAEA,iCAAM6H,YAAN,EAAoB3I,IAAI,CAAC4I,YAAL,CAAkBrI,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYsE,QAAQ,CAACsE,QAArB,CAAvB,CAApB;AACA,UAAKtE,QAAL,GAAgBA,QAAhB;;AACD;AAhBD;;;;;;;AAHF,iBAQgBuE,KARhB,GAQS,eAAaJ,MAAb,EAAgCtE,OAAhC;QAAgCA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAChE,WAAO,IAAIqJ,cAAJ,CAAmBjE,IAAI,CAACJ,OAAD,CAAvB,EAAkCsE,MAAlC,CAAP;AACD,GAVH;;AAAA;;AAAA,SAyBS9F,GAzBT,GAyBS,aAAIsE,KAAJ;AACL,KAAU6B,cAAc,CAAC,KAAKxE,QAAN,EAAgB2C,KAAK,CAAC3C,QAAtB,CAAxB,IAAA3C,SAAS,QAAgD,OAAhD,CAAT,CAAA;AACA,WAAO,IAAI6G,cAAJ,CAAmB,KAAKlE,QAAxB,EAAkCvE,IAAI,CAAC4C,GAAL,CAAS,KAAKkB,GAAd,EAAmBoD,KAAK,CAACpD,GAAzB,CAAlC,CAAP;AACD,GA5BH;;AAAA,SA8BSwD,QA9BT,GA8BS,kBAASJ,KAAT;AACL,KAAU6B,cAAc,CAAC,KAAKxE,QAAN,EAAgB2C,KAAK,CAAC3C,QAAtB,CAAxB,IAAA3C,SAAS,QAAgD,OAAhD,CAAT,CAAA;AACA,WAAO,IAAI6G,cAAJ,CAAmB,KAAKlE,QAAxB,EAAkCvE,IAAI,CAACsH,QAAL,CAAc,KAAKxD,GAAnB,EAAwBoD,KAAK,CAACpD,GAA9B,CAAlC,CAAP;AACD,GAjCH;;AAAA,SAmCS0D,aAnCT,GAmCS,uBACLC,iBADK,EAELC,MAFK,EAGLC,QAHK;QACLF;AAAAA,MAAAA,oBAA4B;;;QAE5BE;AAAAA,MAAAA,WAAqBzI,gBAAQ,CAACwH;;;AAE9B,+BAAac,aAAb,YAA2BC,iBAA3B,EAA8CC,MAA9C,EAAsDC,QAAtD;AACD,GAzCH;;AAAA,SA2CSU,OA3CT,GA2CS,iBACLD,aADK,EAELV,MAFK,EAGLC,QAHK;QACLS;AAAAA,MAAAA,gBAAwB,KAAK7D,QAAL,CAAcsE;;;QAEtClB;AAAAA,MAAAA,WAAqBzI,gBAAQ,CAACwH;;;AAE9B,MAAU0B,aAAa,IAAI,KAAK7D,QAAL,CAAcsE,QAAzC,KAAAjH,SAAS,QAA0C,UAA1C,CAAT,CAAA;AACA,+BAAayG,OAAb,YAAqBD,aAArB,EAAoCV,MAApC,EAA4CC,QAA5C;AACD,GAlDH;;AAAA,SAoDSqB,OApDT,GAoDS,iBAAQtB,MAAR;QAAQA;AAAAA,MAAAA,SAAiB;AAAEE,QAAAA,cAAc,EAAE;AAAlB;;;AAC9BrB,IAAAA,KAAG,CAAC+B,EAAJ,GAAS,KAAK/D,QAAL,CAAcsE,QAAvB;AACA,WAAO,IAAItC,KAAJ,CAAQ,KAAKQ,SAAL,CAAezE,QAAf,EAAR,EAAmC4F,GAAnC,CAAuC,KAAKlB,WAAL,CAAiB1E,QAAjB,EAAvC,EAAoE+D,QAApE,CAA6EqB,MAA7E,CAAP;AACD,GAvDH;;AAAA;AAAA;AAAA,SAqBE;AACE,aAAO,KAAKX,SAAZ;AACD;AAvBH;;AAAA;AAAA,EAAoCD,QAApC;;ICLamC,WAAb;AAAA;;AAGE;AACA,uBAAmB3D,KAAnB,EAAiCoD,MAAjC;;;AACE,uCAAMpD,KAAN,EAAaoD,MAAb;AACA,UAAKpD,KAAL,GAAaA,KAAb;;AACD;;AAPH;;AAAA,SASS1C,GATT,GASS,aAAIsE,KAAJ;AACL,KAAU,KAAK5B,KAAL,CAAW4D,MAAX,CAAkBhC,KAAK,CAAC5B,KAAxB,CAAV,IAAA1D,SAAS,QAAiC,OAAjC,CAAT,CAAA;AACA,WAAO,IAAIqH,WAAJ,CAAgB,KAAK3D,KAArB,EAA4BtF,IAAI,CAAC4C,GAAL,CAAS,KAAKkB,GAAd,EAAmBoD,KAAK,CAACpD,GAAzB,CAA5B,CAAP;AACD,GAZH;;AAAA,SAcSwD,QAdT,GAcS,kBAASJ,KAAT;AACL,KAAU,KAAK5B,KAAL,CAAW4D,MAAX,CAAkBhC,KAAK,CAAC5B,KAAxB,CAAV,IAAA1D,SAAS,QAAiC,OAAjC,CAAT,CAAA;AACA,WAAO,IAAIqH,WAAJ,CAAgB,KAAK3D,KAArB,EAA4BtF,IAAI,CAACsH,QAAL,CAAc,KAAKxD,GAAnB,EAAwBoD,KAAK,CAACpD,GAA9B,CAA5B,CAAP;AACD,GAjBH;;AAAA;AAAA,EAAiC2E,cAAjC;;ICKaU,KAAb;AAAA;;AAqBE;AACA,iBAAmBC,YAAnB,EAA2CC,aAA3C,EAAoErC,WAApE,EAA4FD,SAA5F;;;AACE,iCAAMA,SAAN,EAAiBC,WAAjB;AAEA,UAAKoC,YAAL,GAAoBA,YAApB;AACA,UAAKC,aAAL,GAAqBA,aAArB;AACA,UAAKC,MAAL,GAAc,IAAIxC,QAAJ,CACZ9G,IAAI,CAAC4I,YAAL,CAAkBrI,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYmJ,YAAY,CAACP,QAAzB,CAAvB,CADY,EAEZ7I,IAAI,CAAC4I,YAAL,CAAkBrI,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYoJ,aAAa,CAACR,QAA1B,CAAvB,CAFY,CAAd;;AAID;;AA/BH,QASgBU,SAThB,GASS,mBAAiBnE,KAAjB;AACL,QAAMoE,MAAM,GAAY,EAAxB;;AACA,yDAAwBpE,KAAK,CAACqE,KAAN,CAAYC,OAAZ,EAAxB,wCAA+C;AAAA;AAAA,UAAnCC,CAAmC;AAAA,UAAhCC,IAAgC;AAC7CJ,MAAAA,MAAM,CAACnG,IAAP,CACE+B,KAAK,CAACD,IAAN,CAAWwE,CAAX,EAAcT,MAAd,CAAqBU,IAAI,CAACC,MAA1B,IACI,IAAIV,KAAJ,CAAUS,IAAI,CAACE,QAAL,CAAcvF,QAAxB,EAAkCqF,IAAI,CAACG,QAAL,CAAcxF,QAAhD,EAA0DqF,IAAI,CAACE,QAAL,CAAchG,GAAxE,EAA6E8F,IAAI,CAACG,QAAL,CAAcjG,GAA3F,CADJ,GAEI,IAAIqF,KAAJ,CAAUS,IAAI,CAACG,QAAL,CAAcxF,QAAxB,EAAkCqF,IAAI,CAACE,QAAL,CAAcvF,QAAhD,EAA0DqF,IAAI,CAACG,QAAL,CAAcjG,GAAxE,EAA6E8F,IAAI,CAACE,QAAL,CAAchG,GAA3F,CAHN;AAKD;;AACD,WAAO0F,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;AAAA,aAA+BD,WAAW,CAAC7C,QAAZ,CAAqB8C,YAArB,CAA/B;AAAA,KAAvB,EAA0FX,MAAM,CAAC,CAAD,CAAhG,CAAP;AACD,GAnBH;;AAAA;;AAAA,SAyCSvC,MAzCT,GAyCS;AACL,WAAO,IAAIkC,KAAJ,CAAU,KAAKE,aAAf,EAA8B,KAAKD,YAAnC,EAAiD,KAAKrC,SAAtD,EAAiE,KAAKC,WAAtE,CAAP;AACD,GA3CH;;AAAA,SA6CSK,QA7CT,GA6CS,kBAASH,KAAT;AACL,KAAU6B,cAAc,CAAC,KAAKM,aAAN,EAAqBnC,KAAK,CAACkC,YAA3B,CAAxB,IAAAxH,SAAS,QAAyD,OAAzD,CAAT,CAAA;;AACA,QAAMwI,QAAQ,uBAAS/C,QAAT,YAAkBH,KAAlB,CAAd;;AACA,WAAO,IAAIiC,KAAJ,CAAU,KAAKC,YAAf,EAA6BlC,KAAK,CAACmC,aAAnC,EAAkDe,QAAQ,CAACpD,WAA3D,EAAwEoD,QAAQ,CAACrD,SAAjF,CAAP;AACD,GAjDH;AAAA;;AAAA,SAoDSsD,KApDT,GAoDS,eAAMxG,cAAN,EAAsCO,OAAtC;QAAsCA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AACtE,KAAU2J,cAAc,CAAClF,cAAc,CAACU,QAAhB,EAA0B,KAAK6E,YAA/B,CAAxB,IAAAxH,SAAS,QAA6D,OAA7D,CAAT,CAAA;;AACA,QAAI,KAAKyH,aAAL,YAA8BiB,KAAlC,EAAyC;AACvC,aAAO,IAAIrB,WAAJ,CAAgB,KAAKI,aAArB,EAAoC,oBAAMhC,QAAN,YAAexD,cAAc,CAACC,GAA9B,EAAmCmE,QAAvE,CAAP;AACD;;AACD,WAAOQ,cAAc,CAACK,KAAf,CAAqB,oBAAMzB,QAAN,YAAexD,cAAc,CAACC,GAA9B,EAAmCmE,QAAxD,EAAkE7D,OAAlE,CAAP;AACD,GA1DH;;AAAA,SA4DSoD,aA5DT,GA4DS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAK8C,QAAL,CAAc/C,aAAd,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuDC,QAAvD,CAAP;AACD,GA9DH;;AAAA,SAgESU,OAhET,GAgES,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKmC,QAAL,CAAclC,OAAd,CAAsBD,aAAtB,EAAqCV,MAArC,EAA6CC,QAA7C,CAAP;AACD,GAlEH;;AAAA;AAAA;AAAA,SAiCE;AACE,aAAO,IAAIb,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;AACD;AAnCH;AAAA;AAAA,SAqCE;AACE,iCAAaK,QAAb,YAAsB,KAAKiC,MAA3B;AACD;AAvCH;;AAAA;AAAA,EAA2BxC,QAA3B;;ACWA,IAAI0D,kBAAkB,GAAqE,EAA3F;AAEA,IAAaC,IAAb;AAwBE,gBAAmBC,YAAnB,EAA8CC,YAA9C,EAAyEvG,OAAzE;QAAyEA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAClG,QAAMwL,YAAY,GAAGF,YAAY,CAACpF,KAAb,CAAmBuF,WAAnB,CAA+BF,YAAY,CAACrF,KAA5C;AAAA,MACjB,CAACoF,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,SAAKI,cAAL,GAAsB,IAAIR,KAAJ,CACpBM,YAAY,CAAC,CAAD,CAAZ,CAAgBtF,KAAhB,CAAsBlB,OADF,EAEpBqG,IAAI,CAACxI,UAAL,CAAgB2I,YAAY,CAAC,CAAD,CAAZ,CAAgBtF,KAAhC,EAAuCsF,YAAY,CAAC,CAAD,CAAZ,CAAgBtF,KAAvD,EAA8DlB,OAA9D,CAFoB,EAGpB,EAHoB,EAIpB,OAJoB,EAKpB,mBALoB,CAAtB;AAOA,SAAKwG,YAAL,GAAoBA,YAApB;AACD;;AApCH,OAIgB3I,UAJhB,GAIS,oBAAkB8I,MAAlB,EAAiCC,MAAjC,EAAgD5G,OAAhD;;;QAAgDA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAChF,QAAM6L,MAAM,GAAGF,MAAM,CAACF,WAAP,CAAmBG,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAA/D;;AAEA,QAAI,wBAAAP,kBAAkB,UAAlB,2FAAqBS,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAA/B,iFAA0CkJ,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAApD,OAAiEmJ,SAArE,EAAgF;AAAA;;AAC9EV,MAAAA,kBAAkB,gBACbA,kBADa,6BAEfS,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAFK,yCAGXyI,kBAHW,yDAGX,qBAAqBS,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAA/B,CAHW,6BAIbkJ,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAJG,IAIOoJ,yBAAiB,CACpCtL,eAAe,CAACuE,OAAD,CADqB,EAEpCgH,kBAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,aAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACJ,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAAX,EAAoBkJ,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAA9B,CAAzB,CAAL,CAAZ,CAF2B,EAGpCjC,cAHoC,CAJxB,0BAAlB;AAWD;;AAED,WAAO0K,kBAAkB,CAACS,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAAX,CAAlB,CAAsCkJ,MAAM,CAAC,CAAD,CAAN,CAAUlJ,OAAhD,CAAP;AACD;AAgBD;;;;AAtCF;;AAAA;;AAAA,SA0CSuJ,aA1CT,GA0CS,uBAAchG,KAAd;AACL,WAAOA,KAAK,CAAC4D,MAAN,CAAa,KAAKW,MAAlB,KAA6BvE,KAAK,CAAC4D,MAAN,CAAa,KAAKqC,MAAlB,CAApC;AACD;AAED;;;AA9CF;;AA4DE;;;;AA5DF,SAgESC,OAhET,GAgES,iBAAQlG,KAAR;AACL,KAAU,KAAKgG,aAAL,CAAmBhG,KAAnB,CAAV,IAAA1D,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,WAAO0D,KAAK,CAAC4D,MAAN,CAAa,KAAKW,MAAlB,IAA4B,KAAK4B,WAAjC,GAA+C,KAAKC,WAA3D;AACD;AAED;;;AArEF;;AAAA,SA4FSC,SA5FT,GA4FS,mBAAUrG,KAAV;AACL,KAAU,KAAKgG,aAAL,CAAmBhG,KAAnB,CAAV,IAAA1D,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,WAAO0D,KAAK,CAAC4D,MAAN,CAAa,KAAKW,MAAlB,IAA4B,KAAKC,QAAjC,GAA4C,KAAKC,QAAxD;AACD,GA/FH;;AAAA,SAiGS6B,eAjGT,GAiGS,yBAAgBtH,WAAhB,EAA0CF,OAA1C;QAA0CA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAC1E,KAAU,KAAKkM,aAAL,CAAmBhH,WAAW,CAACgB,KAA/B,CAAV,IAAA1D,SAAS,QAAwC,OAAxC,CAAT,CAAA;;AACA,QAAI5B,IAAI,CAACoH,KAAL,CAAW,KAAK0C,QAAL,CAAchG,GAAzB,EAA8B5D,IAA9B,KAAuCF,IAAI,CAACoH,KAAL,CAAW,KAAK2C,QAAL,CAAcjG,GAAzB,EAA8B5D,IAA9B,CAA3C,EAAgF;AAC9E,YAAM,IAAIe,yBAAJ,EAAN;AACD;;AACD,QAAM4K,YAAY,GAAG,KAAKF,SAAL,CAAerH,WAAW,CAACgB,KAA3B,CAArB;AACA,QAAMwG,aAAa,GAAG,KAAKH,SAAL,CAAerH,WAAW,CAACgB,KAAZ,CAAkB4D,MAAlB,CAAyB,KAAKW,MAA9B,IAAwC,KAAK0B,MAA7C,GAAsD,KAAK1B,MAA1E,CAAtB;AACA,QAAMkC,kBAAkB,GAAG/L,IAAI,CAACqH,QAAL,CAAc/C,WAAW,CAACR,GAA1B,EAA+BrD,IAA/B,CAA3B;AACA,QAAMsG,SAAS,GAAG/G,IAAI,CAACqH,QAAL,CAAc0E,kBAAd,EAAkCD,aAAa,CAAChI,GAAhD,CAAlB;AACA,QAAMkD,WAAW,GAAGhH,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAACqH,QAAL,CAAcwE,YAAY,CAAC/H,GAA3B,EAAgCpD,KAAhC,CAAT,EAAiDqL,kBAAjD,CAApB;AACA,QAAMrH,YAAY,GAAG,IAAIuE,WAAJ,CACnB3E,WAAW,CAACgB,KAAZ,CAAkB4D,MAAlB,CAAyB,KAAKW,MAA9B,IAAwC,KAAK0B,MAA7C,GAAsD,KAAK1B,MADxC,EAEnB7J,IAAI,CAAC6C,MAAL,CAAYkE,SAAZ,EAAuBC,WAAvB,CAFmB,CAArB;;AAIA,QAAIhH,IAAI,CAACoH,KAAL,CAAW1C,YAAY,CAACZ,GAAxB,EAA6B5D,IAA7B,CAAJ,EAAwC;AACtC,YAAM,IAAIqB,4BAAJ,EAAN;AACD;;AACD,WAAO,CAACmD,YAAD,EAAe,IAAI+F,IAAJ,CAASoB,YAAY,CAACjJ,GAAb,CAAiB0B,WAAjB,CAAT,EAAwCwH,aAAa,CAACxE,QAAd,CAAuB5C,YAAvB,CAAxC,EAA8EN,OAA9E,CAAf,CAAP;AACD,GAnHH;;AAAA,SAqHS4H,cArHT,GAqHS,wBAAetH,YAAf,EAA0CN,OAA1C;QAA0CA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAC1E,KAAU,KAAKkM,aAAL,CAAmB5G,YAAY,CAACY,KAAhC,CAAV,IAAA1D,SAAS,QAAyC,OAAzC,CAAT,CAAA;;AACA,QACE5B,IAAI,CAACoH,KAAL,CAAW,KAAK0C,QAAL,CAAchG,GAAzB,EAA8B5D,IAA9B,KACAF,IAAI,CAACoH,KAAL,CAAW,KAAK2C,QAAL,CAAcjG,GAAzB,EAA8B5D,IAA9B,CADA,IAEAF,IAAI,CAAC2B,kBAAL,CAAwB+C,YAAY,CAACZ,GAArC,EAA0C,KAAK6H,SAAL,CAAejH,YAAY,CAACY,KAA5B,EAAmCxB,GAA7E,CAHF,EAIE;AACA,YAAM,IAAI7C,yBAAJ,EAAN;AACD;;AAED,QAAM6K,aAAa,GAAG,KAAKH,SAAL,CAAejH,YAAY,CAACY,KAA5B,CAAtB;AACA,QAAMuG,YAAY,GAAG,KAAKF,SAAL,CAAejH,YAAY,CAACY,KAAb,CAAmB4D,MAAnB,CAA0B,KAAKW,MAA/B,IAAyC,KAAK0B,MAA9C,GAAuD,KAAK1B,MAA3E,CAArB;AACA,QAAM9C,SAAS,GAAG/G,IAAI,CAACqH,QAAL,CAAcrH,IAAI,CAACqH,QAAL,CAAcwE,YAAY,CAAC/H,GAA3B,EAAgCY,YAAY,CAACZ,GAA7C,CAAd,EAAiEpD,KAAjE,CAAlB;AACA,QAAMsG,WAAW,GAAGhH,IAAI,CAACqH,QAAL,CAAcrH,IAAI,CAACsH,QAAL,CAAcwE,aAAa,CAAChI,GAA5B,EAAiCY,YAAY,CAACZ,GAA9C,CAAd,EAAkErD,IAAlE,CAApB;AACA,QAAM6D,WAAW,GAAG,IAAI2E,WAAJ,CAClBvE,YAAY,CAACY,KAAb,CAAmB4D,MAAnB,CAA0B,KAAKW,MAA/B,IAAyC,KAAK0B,MAA9C,GAAuD,KAAK1B,MAD1C,EAElB7J,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAAC6C,MAAL,CAAYkE,SAAZ,EAAuBC,WAAvB,CAAT,EAA8C7G,GAA9C,CAFkB,CAApB;AAIA,WAAO,CAACmE,WAAD,EAAc,IAAImG,IAAJ,CAASoB,YAAY,CAACjJ,GAAb,CAAiB0B,WAAjB,CAAT,EAAwCwH,aAAa,CAACxE,QAAd,CAAuB5C,YAAvB,CAAxC,EAA8EN,OAA9E,CAAd,CAAP;AACD,GAxIH;;AAAA,SA0IS6H,kBA1IT,GA0IS,4BACLC,WADK,EAELxB,YAFK,EAGLC,YAHK;AAKL,KAAUuB,WAAW,CAAC5G,KAAZ,CAAkB4D,MAAlB,CAAyB,KAAK4B,cAA9B,CAAV,IAAAlJ,SAAS,QAAgD,WAAhD,CAAT,CAAA;AACA,QAAMgJ,YAAY,GAAGF,YAAY,CAACpF,KAAb,CAAmBuF,WAAnB,CAA+BF,YAAY,CAACrF,KAA5C;AAAA,MACjB,CAACoF,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;AAGA,MAAUE,YAAY,CAAC,CAAD,CAAZ,CAAgBtF,KAAhB,CAAsB4D,MAAtB,CAA6B,KAAKW,MAAlC,KAA6Ce,YAAY,CAAC,CAAD,CAAZ,CAAgBtF,KAAhB,CAAsB4D,MAAtB,CAA6B,KAAKqC,MAAlC,CAAvD,KAAA3J,SAAS,QAAyF,OAAzF,CAAT,CAAA;AAEA,QAAIuK,SAAJ;;AACA,QAAInM,IAAI,CAACoH,KAAL,CAAW8E,WAAW,CAACpI,GAAvB,EAA4B5D,IAA5B,CAAJ,EAAuC;AACrCiM,MAAAA,SAAS,GAAGnM,IAAI,CAACsH,QAAL,CAAc/E,IAAI,CAACvC,IAAI,CAACqH,QAAL,CAAcuD,YAAY,CAAC,CAAD,CAAZ,CAAgB9G,GAA9B,EAAmC8G,YAAY,CAAC,CAAD,CAAZ,CAAgB9G,GAAnD,CAAD,CAAlB,EAA6E/D,iBAA7E,CAAZ;AACD,KAFD,MAEO;AACL,UAAMqM,OAAO,GAAGpM,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACqH,QAAL,CAAcuD,YAAY,CAAC,CAAD,CAAZ,CAAgB9G,GAA9B,EAAmCoI,WAAW,CAACpI,GAA/C,CAAZ,EAAiE,KAAKgG,QAAL,CAAchG,GAA/E,CAAhB;AACA,UAAMuI,OAAO,GAAGrM,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACqH,QAAL,CAAcuD,YAAY,CAAC,CAAD,CAAZ,CAAgB9G,GAA9B,EAAmCoI,WAAW,CAACpI,GAA/C,CAAZ,EAAiE,KAAKiG,QAAL,CAAcjG,GAA/E,CAAhB;AACAqI,MAAAA,SAAS,GAAGnM,IAAI,CAAC6B,eAAL,CAAqBuK,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;AACD;;AACD,QAAI,CAACrM,IAAI,CAAC2C,WAAL,CAAiBwJ,SAAjB,EAA4BjM,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAIqB,4BAAJ,EAAN;AACD;;AACD,WAAO,IAAI0H,WAAJ,CAAgB,KAAK6B,cAArB,EAAqCqB,SAArC,CAAP;AACD,GAjKH;;AAAA,SAmKSG,iBAnKT,GAmKS,2BACLhH,KADK,EAEL4G,WAFK,EAGLC,SAHK,EAILI,KAJK,EAKLC,KALK;QAILD;AAAAA,MAAAA,QAAiB;;;AAGjB,KAAU,KAAKjB,aAAL,CAAmBhG,KAAnB,CAAV,IAAA1D,SAAS,QAA4B,OAA5B,CAAT,CAAA;AACA,KAAUsK,WAAW,CAAC5G,KAAZ,CAAkB4D,MAAlB,CAAyB,KAAK4B,cAA9B,CAAV,IAAAlJ,SAAS,QAAgD,cAAhD,CAAT,CAAA;AACA,KAAUuK,SAAS,CAAC7G,KAAV,CAAgB4D,MAAhB,CAAuB,KAAK4B,cAA5B,CAAV,IAAAlJ,SAAS,QAA8C,WAA9C,CAAT,CAAA;AACA,KAAU5B,IAAI,CAAC6B,eAAL,CAAqBsK,SAAS,CAACrI,GAA/B,EAAoCoI,WAAW,CAACpI,GAAhD,CAAV,IAAAlC,SAAS,QAAuD,WAAvD,CAAT,CAAA;AAEA,QAAI6K,mBAAJ;;AACA,QAAI,CAACF,KAAL,EAAY;AACVE,MAAAA,mBAAmB,GAAGP,WAAtB;AACD,KAFD,MAEO;AACL,OAAU,CAAC,CAACM,KAAZ,IAAA5K,SAAS,QAAU,QAAV,CAAT,CAAA;AACA,UAAM8K,WAAW,GAAGtK,cAAc,CAACoK,KAAD,CAAlC;;AACA,UAAI,CAACxM,IAAI,CAACoH,KAAL,CAAWsF,WAAX,EAAwBxM,IAAxB,CAAL,EAAoC;AAClC,YAAMyM,KAAK,GAAGpK,IAAI,CAACvC,IAAI,CAACqH,QAAL,CAAc,KAAKyC,QAAL,CAAchG,GAA5B,EAAiC,KAAKiG,QAAL,CAAcjG,GAA/C,CAAD,CAAlB;AACA,YAAM8I,SAAS,GAAGrK,IAAI,CAACmK,WAAD,CAAtB;;AACA,YAAI1M,IAAI,CAAC2C,WAAL,CAAiBgK,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;AACtC,cAAM7F,SAAS,GAAG/G,IAAI,CAACqH,QAAL,CAAc6E,WAAW,CAACpI,GAA1B,EAA+B9D,IAAI,CAACsH,QAAL,CAAcqF,KAAd,EAAqBC,SAArB,CAA/B,CAAlB;AACA,cAAM5F,WAAW,GAAGhH,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAACqH,QAAL,CAAcsF,KAAd,EAAqBrM,IAArB,CAAT,EAAqCsM,SAArC,CAApB;AACA,cAAMC,YAAY,GAAG7M,IAAI,CAAC6C,MAAL,CAAYkE,SAAZ,EAAuBC,WAAvB,CAArB;AACAyF,UAAAA,mBAAmB,GAAGP,WAAW,CAACtJ,GAAZ,CAAgB,IAAIqG,WAAJ,CAAgB,KAAK6B,cAArB,EAAqC+B,YAArC,CAAhB,CAAtB;AACD,SALD,MAKO;AACLJ,UAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF,OAXD,MAWO;AACLO,QAAAA,mBAAmB,GAAGP,WAAtB;AACD;AACF;;AAED,WAAO,IAAIjD,WAAJ,CACL3D,KADK,EAELtF,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACqH,QAAL,CAAc8E,SAAS,CAACrI,GAAxB,EAA6B,KAAK6H,SAAL,CAAerG,KAAf,EAAsBxB,GAAnD,CAAZ,EAAqE2I,mBAAmB,CAAC3I,GAAzF,CAFK,CAAP;AAID,GAzMH;;AAAA;AAAA;AAAA,SAiDE;AACE,aAAO,IAAIqF,KAAJ,CAAU,KAAKU,MAAf,EAAuB,KAAK0B,MAA5B,EAAoC,KAAKX,YAAL,CAAkB,CAAlB,EAAqB9G,GAAzD,EAA8D,KAAK8G,YAAL,CAAkB,CAAlB,EAAqB9G,GAAnF,CAAP;AACD;AAED;;;;AArDF;AAAA;AAAA,SAwDE;AACE,aAAO,IAAIqF,KAAJ,CAAU,KAAKoC,MAAf,EAAuB,KAAK1B,MAA5B,EAAoC,KAAKe,YAAL,CAAkB,CAAlB,EAAqB9G,GAAzD,EAA8D,KAAK8G,YAAL,CAAkB,CAAlB,EAAqB9G,GAAnF,CAAP;AACD;AA1DH;AAAA;AAAA,SAwEE;AACE,aAAO,KAAK+F,MAAL,CAAYzF,OAAnB;AACD;AA1EH;AAAA;AAAA,SA4EE;AACE,aAAO,KAAKwG,YAAL,CAAkB,CAAlB,EAAqBtF,KAA5B;AACD;AA9EH;AAAA;AAAA,SAgFE;AACE,aAAO,KAAKsF,YAAL,CAAkB,CAAlB,EAAqBtF,KAA5B;AACD;AAlFH;AAAA;AAAA,SAoFE;AACE,aAAO,KAAKsF,YAAL,CAAkB,CAAlB,CAAP;AACD;AAtFH;AAAA;AAAA,SAwFE;AACE,aAAO,KAAKA,YAAL,CAAkB,CAAldA,IAAIkC,oBAAoB,GAAyD,EAAjF;AAEA;;;;AAGA,IAAsBC,OAAtB;AACE;;;AAGA;AAEA;;;;;;;;;;AANF,UAcsBC,cAdtB,2BAeI5I,OAfJ,EAgBIrC,OAhBJ,EAiBIkL,QAjBJ,EAkBIC,MAlBJ,EAmBIhM,IAnBJ;AAAA;;;mCAqBUiM;AAaN,eAAO,IAAI7C,KAAJ,CAAUlG,OAAV,EAAmBrC,OAAnB,EAA4BoL,cAA5B,EAA4CD,MAA5C,EAAoDhM,IAApD,CAAP;;;UAnBAkD,uBAAAA,UAAmBpF,eAAO,CAACI;UAE3B6N,wBAAAA,WAAWG,4BAAkB,CAACC,mBAAU,CAACjJ,OAAD,CAAX;;mBAK3B,iCAAO0I,oBAAP,oFAAO,sBAAuB1I,OAAvB,CAAP,2DAAO,uBAAkCrC,OAAlC,CAAP,MAAsD;;6CAClD+K,oBAAoB,CAAC1I,OAAD,CAApB,CAA8BrC,OAA9B,qBACM,IAAIuL,kBAAJ,CAAavL,OAAb,EAAsBwL,KAAtB,EAA6BN,QAA7B,EAAuCpE,QAAvC,GAAkD2E,IAAlD,CAAuD,UAAC3E,QAAD;;;AAC3DiE,QAAAA,oBAAoB,gBACfA,oBADe,6BAEjB1I,OAFiB,2CAGb0I,oBAHa,2DAGb,uBAAuB1I,OAAvB,CAHa,6BAIfrC,OAJe,IAIL8G,QAJK,0BAApB;AAOA,eAAOA,QAAP;AACD,OATK;AAWb,KAnCH;AAAA;AAAA;AAAA;AAqCE;;;;;;AArCF;;AAAA,UA2CsB4E,aA3CtB,0BA4CI1C,MA5CJ,EA6CIC,MA7CJ,EA8CIiC,QA9CJ;AAAA;UA8CIA,wBAAAA,WAAWG,4BAAkB,CAACC,mBAAU,CAACtC,MAAM,CAAC3G,OAAR,CAAX;AAE7B,QAAU2G,MAAM,CAAC3G,OAAP,KAAmB4G,MAAM,CAAC5G,OAApC,qCAAAxC,SAAS,QAAoC,UAApC,CAAT,GAAAA,SAAS,OAAT;AACA,UAAMG,OAAO,GAAG0I,IAAI,CAACxI,UAAL,CAAgB8I,MAAhB,EAAwBC,MAAxB,EAAgCD,MAAM,CAAC3G,OAAvC,CAAhB;6BACqC,IAAIkJ,kBAAJ,CAAavL,OAAb,EAAsB2L,WAAW,CAACC,GAAlC,EAAuCV,QAAvC,EAAiDW,WAAjD;YAA9BC;YAAWC;AAClB,YAAMC,QAAQ,GAAGhD,MAAM,CAACF,WAAP,CAAmBG,MAAnB,IAA6B,CAAC6C,SAAD,EAAYC,SAAZ,CAA7B,GAAsD,CAACA,SAAD,EAAYD,SAAZ,CAAvE;AACA,eAAO,IAAIpD,IAAJ,CAAS,IAAIxB,WAAJ,CAAgB8B,MAAhB,EAAwBgD,QAAQ,CAAC,CAAD,CAAhC,CAAT,EAA+C,IAAI9E,WAAJ,CAAgB+B,MAAhB,EAAwB+C,QAAQ,CAAC,CAAD,CAAhC,CAA/C,EAAqFhD,MAAM,CAAC3G,OAA5F,CAAP;;AACD,KArDH;AAAA;AAAA;AAAA;;AAAA;AAAA;;ICiCa4J,gBAAgB,GAAU;AACrCC,EAAAA,EAAE,EAAE,kBADiC;AAErCC,EAAAA,QAAQ,EAAE,CAF2B;AAGrChN,EAAAA,IAAI,EAAE,UAH+B;AAIrCgM,EAAAA,MAAM,EAAE,KAJ6B;AAKrCiB,EAAAA,OAAO,EAAE,IAL4B;AAMrCC,EAAAA,IAAI,EAAE,oFAN+B;AAOrCC,EAAAA,WAAW,EAAE,KAPwB;AAQrCC,EAAAA,iBAAiB,EAAE,IARkB;AASrCC,EAAAA,mBAAmB,EAAE,IATgB;AAUrCC,EAAAA,OAAO,EAAE,+DAV4B;AAWrCC,EAAAA,YAAY,EAAE,UAXuB;AAYrCC,EAAAA,cAAc,EAAE;AACdxN,IAAAA,IAAI,EAAE,OADQ;AAEdgM,IAAAA,MAAM,EAAE,KAFM;AAGdrE,IAAAA,QAAQ,EAAE;AAHI,GAZqB;AAiBrC8F,EAAAA,iBAAiB,EAAE,CAAC,sBAAD;AAjBkB,CAAhC;;AAqBP,IAAavP,WAAW,GAAU;AAChC6O,EAAAA,EAAE,EAAE,aAD4B;AAEhCC,EAAAA,QAAQ,EAAE,GAFsB;AAGhChN,EAAAA,IAAI,EAAE,aAH0B;AAIhCgM,EAAAA,MAAM,EAAE,KAJwB;AAKhC0B,EAAAA,YAAY,EAAE,MALkB;AAMhCT,EAAAA,OAAO,EAAE,IANuB;AAOhCE,EAAAA,WAAW,EAAE,KAPmB;AAQhCC,EAAAA,iBAAiB,EAAE,KARa;AAShCC,EAAAA,mBAAmB,EAAE,KATW;AAUhCC,EAAAA,OAAO,EAAE,EAVuB;AAWhCK,EAAAA,SAAS,EAAE;AACTvJ,IAAAA,KAAK,EAAEnG,iBAAiB,CAACC,WAAlB,CAA8BC,KAD5B;AAETyP,IAAAA,OAAO,EAAE3P,iBAAiB,CAACC,WAAlB,CAA8BE,OAF9B;AAGTyP,IAAAA,MAAM,EAAE5P,iBAAiB,CAACC,WAAlB,CAA8BG,MAH7B;AAITyP,IAAAA,oBAAoB,EAAE7P,iBAAiB,CAACC,WAAlB,CAA8BI;AAJ3C,GAXqB;AAiBhCkP,EAAAA,cAAc,EAAE;AACdxN,IAAAA,IAAI,EAAE,KADQ;AAEdgM,IAAAA,MAAM,EAAE,KAFM;AAGdrE,IAAAA,QAAQ,EAAE;AAHI,GAjBgB;AAsBhC8F,EAAAA,iBAAiB,EAAE;AAtBa,CAA3B;AAyBP,IAAa/O,UAAU,GAAU;AAC/BqO,EAAAA,EAAE,EAAE,YAD2B;AAE/BC,EAAAA,QAAQ,EAAE,GAFqB;AAG/BhN,EAAAA,IAAI,EAAE,gBAHyB;AAI/BgM,EAAAA,MAAM,EAAE,KAJuB;AAK/B0B,EAAAA,YAAY,EAAE,MALiB;AAM/BT,EAAAA,OAAO,EAAE,KANsB;AAO/BE,EAAAA,WAAW,EAAE,IAPkB;AAQ/BC,EAAAA,iBAAiB,EAAE,KARY;AAS/BC,EAAAA,mBAAmB,EAAE,KATU;AAU/BC,EAAAA,OAAO,EAAE,uCAVsB;AAW/BK,EAAAA,SAAS,EAAE;AACTvJ,IAAAA,KAAK,EAAEnG,iBAAiB,CAACS,UAAlB,CAA6BP,KAD3B;AAETyP,IAAAA,OAAO,EAAE3P,iBAAiB,CAACS,UAAlB,CAA6BN,OAF7B;AAGTyP,IAAAA,MAAM,EAAE5P,iBAAiB,CAACS,UAAlB,CAA6BL,MAH5B;AAITyP,IAAAA,oBAAoB,EAAE7P,iBAAiB,CAACS,UAAlB,CAA6BJ;AAJ1C,GAXoB;AAiB/BkP,EAAAA,cAAc,EAAE;AACdxN,IAAAA,IAAI,EAAE,KADQ;AAEdgM,IAAAA,MAAM,EAAE,KAFM;AAGdrE,IAAAA,QAAQ,EAAE;AAHI,GAjBe;AAsB/B8F,EAAAA,iBAAiB,EAAE,CAAC,yCAAD;AAtBY,CAA1B;AAyBP,IAAaM,MAAM,GAAY,CAACjB,gBAAD,EAAmB5O,WAAnB,EAAgCQ,UAAhC,CAAxB;;;ACnHP;;;;;;AAKA,IAAasP,QAAb;AAcE;;;;;;AAMA,kBAAsBrG,QAAtB,EAAwCqE,MAAxC,EAAyDhM,IAAzD;AACEM,EAAAA,4BAA4B,CAACxB,IAAI,CAACC,MAAL,CAAY4I,QAAZ,CAAD,EAAwBlI,YAAY,CAACE,KAArC,CAA5B;AAEA,OAAKgI,QAAL,GAAgBA,QAAhB;AACA,OAAKqE,MAAL,GAAcA,MAAd;AACA,OAAKhM,IAAL,GAAYA,IAAZ;AACD,CA1BH;AAKE;;;;AAIuBgO,iBAAA,gDACpBlQ,eAAO,CAACY,UADY,iBACC,IAAIsP,QAAJ,CAAa,EAAb,EAAiB,KAAjB,EAAwB,KAAxB,CADD,qBAEpBlQ,eAAO,CAACI,WAFY,iBAEE,IAAI8P,QAAJ,CAAa,EAAb,EAAiB,KAAjB,EAAwB,KAAxB,CAFF;AAoBzB,IAAM1K,IAAI,GAAG0K,QAAQ,CAACC,QAAtB;;;AClCA;;;;AAGA,IAAa7E,KAAb;AAAA;;AAIE,iBACElG,OADF,EAEErC,OAFF,EAGE8G,QAHF,EAIEqE,MAJF,EAKEhM,IALF;;;QACEkD;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAM3B,iCAAMyJ,QAAN,EAAgBqE,MAAhB,EAAwBhM,IAAxB;AAVc,iBAAA,GAAmBlC,eAAO,CAACI,WAA3B;AAWd,UAAKgF,OAAL,GAAeA,OAAf;AACA,UAAKrC,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;;AACD;AAED;;;;;;AAhBF;;AAAA,SAoBSmH,MApBT,GAoBS,gBAAOhC,KAAP;AACL;AACA,QAAI,SAASA,KAAb,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAK9C,OAAL,KAAiB8C,KAAK,CAAC9C,OAAvB,IAAkC,KAAKrC,OAAL,KAAiBmF,KAAK,CAACnF,OAAhE;AACD;AAED;;;;;;AA5BF;;AAAA,SAkCS8I,WAlCT,GAkCS,qBAAY3D,KAAZ;AACL,MAAU,KAAK9C,OAAL,KAAiB8C,KAAK,CAAC9C,OAAjC,KAAAxC,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,MAAU,KAAKG,OAAL,KAAiBmF,KAAK,CAACnF,OAAjC,KAAAH,SAAS,QAAiC,WAAjC,CAAT,CAAA;AACA,WAAO,KAAKG,OAAL,CAAaqN,WAAb,KAA6BlI,KAAK,CAACnF,OAAN,CAAcqN,WAAd,EAApC;AACD,GAtCH;;AAAA;AAAA,EAA2BF,QAA3B;AAyCA;;;;AAGA,SAAgBnG,eAAesG,WAAqBC;AAClD,MAAID,SAAS,YAAY/E,KAArB,IAA8BgF,SAAS,YAAYhF,KAAvD,EAA8D;AAC5D,WAAO+E,SAAS,CAACnG,MAAV,CAAiBoG,SAAjB,CAAP;AACD,GAFD,MAEO,IAAID,SAAS,YAAY/E,KAAzB,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA,IAAIgF,SAAS,YAAYhF,KAAzB,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA;AACL,WAAO+E,SAAS,KAAKC,SAArB;AACD;AACF;;AAGD,IAAa9P,IAAI,sBACdR,eAAO,CAACY,UADM,iBACO,IAAI0K,KAAJ,CAAUtL,eAAO,CAACY,UAAlB,EAA8BT,iBAAiB,CAACS,UAAlB,CAA6BJ,IAA3D,EAAiE,EAAjE,EAAqE,MAArE,EAA6E,aAA7E,CADP,QAEdR,eAAO,CAACI,WAFM,iBAEQ,IAAIkL,KAAJ,CAAUtL,eAAO,CAACI,WAAlB,EAA+BD,iBAAiB,CAACC,WAAlB,CAA8BI,IAA7D,EAAmE,EAAnE,EAAuE,MAAvE,EAA+E,aAA/E,CAFR,QAAV;;IC1DM+P,KAAb;AAOE,iBAAmB9F,KAAnB,EAAkC+F,KAAlC,EAAmDC,MAAnD;AACE,MAAUhG,KAAK,CAACrG,MAAN,GAAe,CAAzB,KAAAxB,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,KACE6H,KAAK,CAACiG,KAAN,CAAY,UAAA9F,IAAI;AAAA,aAAIA,IAAI,CAACxF,OAAL,KAAiBqF,KAAK,CAAC,CAAD,CAAL,CAASrF,OAA9B;AAAA,KAAhB,CADF,IAAAxC,SAAS,QAEP,WAFO,CAAT,CAAA;AAIA,MACG4N,KAAK,YAAYlF,KAAjB,IAA0Bb,KAAK,CAAC,CAAD,CAAL,CAAS6B,aAAT,CAAuBkE,KAAvB,CAA3B,IACGA,KAAK,KAAKhL,IAAI,CAACiF,KAAK,CAAC,CAAD,CAAL,CAASrF,OAAV,CAAd,IAAoCqF,KAAK,CAAC,CAAD,CAAL,CAAS6B,aAAT,CAAuB9L,IAAI,CAACiK,KAAK,CAAC,CAAD,CAAL,CAASrF,OAAV,CAA3B,CAFzC,KAAAxC,SAAS,QAGP,OAHO,CAAT,CAAA;AAKA,MACE,OAAO6N,MAAP,KAAkB,WAAlB,IACGA,MAAM,YAAYnF,KAAlB,IAA2Bb,KAAK,CAACA,KAAK,CAACrG,MAAN,GAAe,CAAhB,CAAL,CAAwBkI,aAAxB,CAAsCmE,MAAtC,CAD9B,IAEGA,MAAM,KAAKjL,IAAI,CAACiF,KAAK,CAAC,CAAD,CAAL,CAASrF,OAAV,CAAf,IAAqCqF,KAAK,CAACA,KAAK,CAACrG,MAAN,GAAe,CAAhB,CAAL,CAAwBkI,aAAxB,CAAsC9L,IAAI,CAACiK,KAAK,CAAC,CAAD,CAAL,CAASrF,OAAV,CAA1C,CAH1C,KAAAxC,SAAS,QAIP,QAJO,CAAT,CAAA;AAOA,QAAMuD,IAAI,GAAY,CAACqK,KAAK,YAAYlF,KAAjB,GAAyBkF,KAAzB,GAAiChQ,IAAI,CAACiK,KAAK,CAAC,CAAD,CAAL,CAASrF,OAAV,CAAtC,CAAtB;;AACA,yDAAwBqF,KAAK,CAACC,OAAN,EAAxB,wCAAyC;AAAA;AAAA,UAA7BC,CAA6B;AAAA,UAA1BC,IAA0B;AACvC,UAAM+F,YAAY,GAAGxK,IAAI,CAACwE,CAAD,CAAzB;AACA,QAAUgG,YAAY,CAACzG,MAAb,CAAoBU,IAAI,CAACC,MAAzB,KAAoC8F,YAAY,CAACzG,MAAb,CAAoBU,IAAI,CAAC2B,MAAzB,CAA9C,KAAA3J,SAAS,QAAuE,MAAvE,CAAT,CAAA;;AACA,UAAM6N,OAAM,GAAGE,YAAY,CAACzG,MAAb,CAAoBU,IAAI,CAACC,MAAzB,IAAmCD,IAAI,CAAC2B,MAAxC,GAAiD3B,IAAI,CAACC,MAArE;;AACA1E,MAAAA,IAAI,CAAC9B,IAAL,CAAUoM,OAAV;AACD;;AAED,SAAKhG,KAAL,GAAaA,KAAb;AACA,SAAKtE,IAAL,GAAYA,IAAZ;AACA,SAAKyK,QAAL,GAAgBzG,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAhB;AACA,SAAKiG,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwBtK,IAAI,CAACA,IAAI,CAAC/B,MAAL,GAAc,CAAf,CAA5B;AACD;;AAtCH;AAAA;AAAA,SAwCE;AACE,aAAO,KAAKqG,KAAL,CAAW,CAAX,EAAcrF,OAArB;AACD;AA1CH;;AAAA;AAAA;;ACJA,IAAMyL,YAAY,gBAAG,IAAI/I,QAAJ,CAAatG,IAAb,CAArB;;AAEA,IAAasP,OAAb;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,SACStI,aADT,GACS,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;AAAAA,MAAAA,oBAA4B;;;AAC/C,WAAO,KAAKJ,QAAL,CAAcwI,YAAd,EAA4BrI,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;AACD,GAHH;;AAAA,SAKSU,OALT,GAKS,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;AAAAA,MAAAA,gBAAwB;;;AACrC,WAAO,KAAKf,QAAL,CAAcwI,YAAd,EAA4BxH,OAA5B,CAAoCD,aAApC,EAAmDV,MAAnD,EAA2DC,QAA3D,CAAP;AACD,GAPH;;AAAA;AAAA,EAA6Bb,QAA7B;;ACSA;;;;;;;AAMA,SAASiJ,kBAAT,CAA4BH,QAA5B,EAA6CtL,WAA7C,EAA0EI,YAA1E;AACE,MAAMsL,UAAU,GAAGJ,QAAQ,CAAC9L,GAAT,CAAauD,QAAb,CAAsB/C,WAAW,CAACR,GAAlC,CAAnB;;AAEA,MAAMmM,QAAQ,GAAGD,UAAU,CAAC1I,QAAX,CAAoB5C,YAAY,CAACZ,GAAjC,EAAsCjB,MAAtC,CAA6CmN,UAA7C,CAAjB;AACA,SAAO,IAAIF,OAAJ,CAAYG,QAAQ,CAAClJ,SAArB,EAAgCkJ,QAAQ,CAACjJ,WAAzC,CAAP;AACD;AASD;;;AACA,SAAgBkJ,sBAAsBC,GAAgBC;AACpD;AACA,GAAUrH,cAAc,CAACoH,CAAC,CAAC7L,WAAF,CAAcC,QAAf,EAAyB6L,CAAC,CAAC9L,WAAF,CAAcC,QAAvC,CAAxB,IAAA3C,SAAS,QAAiE,gBAAjE,CAAT,CAAA;AACA,GAAUmH,cAAc,CAACoH,CAAC,CAACzL,YAAF,CAAeH,QAAhB,EAA0B6L,CAAC,CAAC1L,YAAF,CAAeH,QAAzC,CAAxB,IAAA3C,SAAS,QAAmE,iBAAnE,CAAT,CAAA;;AACA,MAAIuO,CAAC,CAACzL,YAAF,CAAe6C,OAAf,CAAuB6I,CAAC,CAAC1L,YAAzB,CAAJ,EAA4C;AAC1C,QAAIyL,CAAC,CAAC7L,WAAF,CAAciD,OAAd,CAAsB6I,CAAC,CAAC9L,WAAxB,CAAJ,EAA0C;AACxC,aAAO,CAAP;AACD,KAHyC;;;AAK1C,QAAI6L,CAAC,CAAC7L,WAAF,CAAcxB,QAAd,CAAuBsN,CAAC,CAAC9L,WAAzB,CAAJ,EAA2C;AACzC,aAAO,CAAC,CAAR;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAVD,MAUO;AACL;AACA,QAAI6L,CAAC,CAACzL,YAAF,CAAe5B,QAAf,CAAwBsN,CAAC,CAAC1L,YAA1B,CAAJ,EAA6C;AAC3C,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF;AACF;;AAGD,SAAgB2L,gBAAgBF,GAAUC;AACxC,MAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;AACA,MAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAOA,MAAP;AACD;;;AAGD,MAAIH,CAAC,CAACI,WAAF,CAAczN,QAAd,CAAuBsN,CAAC,CAACG,WAAzB,CAAJ,EAA2C;AACzC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIJ,CAAC,CAACI,WAAF,CAAc5N,WAAd,CAA0ByN,CAAC,CAACG,WAA5B,CAAJ,EAA8C;AACnD,WAAO,CAAP;AACD;;;AAGD,SAAOJ,CAAC,CAAC/K,KAAF,CAAQD,IAAR,CAAa/B,MAAb,GAAsBgN,CAAC,CAAChL,KAAF,CAAQD,IAAR,CAAa/B,MAA1C;AACD;AASD;;;;;;AAKA,SAASoN,aAAT,CAAuB3M,cAAvB,EAAuDO,OAAvD;MAAuDA;AAAAA,IAAAA,UAAmBpF,eAAO,CAACI;;;AAChF,MAAIyE,cAAc,YAAYoF,WAA9B,EAA2C,OAAOpF,cAAP;AAC3C,MAAIA,cAAc,CAACU,QAAf,KAA4BC,IAAI,CAACJ,OAAD,CAApC,EAA+C,OAAO,IAAI6E,WAAJ,CAAgBzJ,IAAI,CAAC4E,OAAD,CAApB,EAA+BP,cAAc,CAACC,GAA9C,CAAP;AAC/C,IAAAlC,SAAS,QAAQ,UAAR,CAAT,CAAA;AACD;;AAED,SAAS6O,eAAT,CAAyBlM,QAAzB,EAA6CH,OAA7C;MAA6CA;AAAAA,IAAAA,UAAmBpF,eAAO,CAACI;;;AACtE,MAAImF,QAAQ,YAAY+F,KAAxB,EAA+B,OAAO/F,QAAP;AAC/B,MAAIA,QAAQ,KAAKC,IAAI,CAACJ,OAAD,CAArB,EAAgC,OAAO5E,IAAI,CAAC4E,OAAD,CAAX;AAChC,IAAAxC,SAAS,QAAQ,UAAR,CAAT,CAAA;AACD;AAED;;;;;;AAIA,IAAa8O,KAAb;AAkDE,iBACEtL,KADF,EAEEsD,MAFF,EAGEzC,SAHF,EAIE7B,OAJF;QAIEA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAxBb,gBAAA,GAAmBJ,eAAO,CAACI,WAA3B;AA0Bd,QAAMuR,OAAO,GAAkB,IAAIC,KAAJ,CAAUxL,KAAK,CAACD,IAAN,CAAW/B,MAArB,CAA/B;AACA,QAAMyN,SAAS,GAAW,IAAID,KAAJ,CAAUxL,KAAK,CAACqE,KAAN,CAAYrG,MAAtB,CAA1B;;AACA,QAAI6C,SAAS,KAAKhH,iBAAS,CAACiH,WAA5B,EAAyC;AACvC,OAAU6C,cAAc,CAACL,MAAM,CAACnE,QAAR,EAAkBa,KAAK,CAACoK,KAAxB,CAAxB,IAAA5N,SAAS,QAA+C,OAA/C,CAAT,CAAA;AACA+O,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaH,aAAa,CAAC9H,MAAD,EAAStD,KAAK,CAAChB,OAAf,CAA1B;;AACA,WAAK,IAAIuF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvE,KAAK,CAACD,IAAN,CAAW/B,MAAX,GAAoB,CAAxC,EAA2CuG,CAAC,EAA5C,EAAgD;AAC9C,YAAMC,IAAI,GAAGxE,KAAK,CAACqE,KAAN,CAAYE,CAAZ,CAAb;;AACA,oCAAiCC,IAAI,CAACgC,eAAL,CAAqB+E,OAAO,CAAChH,CAAD,CAA5B,EAAiCvF,OAAjC,CAAjC;AAAA,YAAOM,YAAP;AAAA,YAAqBoM,QAArB;;AACAH,QAAAA,OAAO,CAAChH,CAAC,GAAG,CAAL,CAAP,GAAiBjF,YAAjB;AACAmM,QAAAA,SAAS,CAAClH,CAAD,CAAT,GAAemH,QAAf;AACD;AACF,KATD,MASO;AACL,OAAU/H,cAAc,CAACL,MAAM,CAACnE,QAAR,EAAkBa,KAAK,CAACqK,MAAxB,CAAxB,IAAA7N,SAAS,QAAgD,QAAhD,CAAT,CAAA;AACA+O,MAAAA,OAAO,CAACA,OAAO,CAACvN,MAAR,GAAiB,CAAlB,CAAP,GAA8BoN,aAAa,CAAC9H,MAAD,EAAStD,KAAK,CAAChB,OAAf,CAA3C;;AACA,WAAK,IAAIuF,EAAC,GAAGvE,KAAK,CAACD,IAAN,CAAW/B,MAAX,GAAoB,CAAjC,EAAoCuG,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;AAC9C,YAAMC,KAAI,GAAGxE,KAAK,CAACqE,KAAN,CAAYE,EAAC,GAAG,CAAhB,CAAb;;AACA,mCAAgCC,KAAI,CAACoC,cAAL,CAAoB2E,OAAO,CAAChH,EAAD,CAA3B,EAAgCvF,OAAhC,CAAhC;AAAA,YAAOE,WAAP;AAAA,YAAoBwM,SAApB;;AACAH,QAAAA,OAAO,CAAChH,EAAC,GAAG,CAAL,CAAP,GAAiBrF,WAAjB;AACAuM,QAAAA,SAAS,CAAClH,EAAC,GAAG,CAAL,CAAT,GAAmBmH,SAAnB;AACD;AACF;;AAED,SAAK1L,KAAL,GAAaA,KAAb;AACA,SAAKa,SAAL,GAAiBA,SAAjB;AACA,SAAK3B,WAAL,GACE2B,SAAS,KAAKhH,iBAAS,CAACiH,WAAxB,GACIwC,MADJ,GAEItD,KAAK,CAACoK,KAAN,KAAgBhL,IAAI,CAACJ,OAAD,CAApB,GACAqE,cAAc,CAACK,KAAf,CAAqB6H,OAAO,CAAC,CAAD,CAAP,CAAW7M,GAAhC,EAAqCM,OAArC,CADA,GAEAuM,OAAO,CAAC,CAAD,CALb;AAMA,SAAKjM,YAAL,GACEuB,SAAS,KAAKhH,iBAAS,CAACkH,YAAxB,GACIuC,MADJ,GAEItD,KAAK,CAACqK,MAAN,KAAiBjL,IAAI,CAACJ,OAAD,CAArB,GACAqE,cAAc,CAACK,KAAf,CAAqB6H,OAAO,CAACA,OAAO,CAACvN,MAAR,GAAiB,CAAlB,CAAP,CAA4BU,GAAjD,EAAsDM,OAAtD,CADA,GAEAuM,OAAO,CAACA,OAAO,CAACvN,MAAR,GAAiB,CAAlB,CALb;AAMA,SAAK2N,cAAL,GAAsB,IAAI5H,KAAJ,CACpB,KAAK7E,WAAL,CAAiBC,QADG,EAEpB,KAAKG,YAAL,CAAkBH,QAFE,EAGpB,KAAKD,WAAL,CAAiBR,GAHG,EAIpB,KAAKY,YAAL,CAAkBZ,GAJE,CAAtB;AAMA,SAAKkN,YAAL,GAAoB7H,KAAK,CAACI,SAAN,CAAgB,IAAIgG,KAAJ,CAAUsB,SAAV,EAAqBzL,KAAK,CAACoK,KAA3B,CAAhB,CAApB;AACA,SAAKe,WAAL,GAAmBR,kBAAkB,CAAC3K,KAAK,CAACwK,QAAP,EAAiB,KAAKtL,WAAtB,EAAmC,KAAKI,YAAxC,CAArC;AACA,SAAKN,OAAL,GAAeA,OAAf;AACD;AArED;;;;;;;AAhCF,QAqCgB6M,OArChB,GAqCS,iBAAe7L,KAAf,EAA6BN,QAA7B,EAAuDV,OAAvD;QAAuDA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AACvF,WAAO,IAAIsR,KAAJ,CAAUtL,KAAV,EAAiBN,QAAjB,EAA2B7F,iBAAS,CAACiH,WAArC,EAAkD9B,OAAlD,CAAP;AACD;AAED;;;;;AAzCF;;AAAA,QA8CgB8M,QA9ChB,GA8CS,kBAAgB9L,KAAhB,EAA8BH,SAA9B,EAAyDb,OAAzD;QAAyDA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AACzF,WAAO,IAAIsR,KAAJ,CAAUtL,KAAV,EAAiBH,SAAjB,EAA4BhG,iBAAS,CAACkH,YAAtC,EAAoD/B,OAApD,CAAP;AACD;AAuDD;;;;AAvGF;;AAAA;;AAAA,SA2GSc,gBA3GT,GA2GS,0BAAiBiM,iBAAjB,EAA6C/M,OAA7C;QAA6CA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAC7E,KAAU,CAAC+R,iBAAiB,CAACrO,QAAlB,CAA2B5C,IAA3B,CAAX,IAAA0B,SAAS,QAAoC,oBAApC,CAAT,CAAA;;AACA,QAAI,KAAKqE,SAAL,KAAmBhH,iBAAS,CAACkH,YAAjC,EAA+C;AAC7C,aAAO,KAAKzB,YAAZ;AACD,KAFD,MAEO;AACL,UAAM0M,yBAAyB,GAAG,IAAItK,QAAJ,CAAa3G,GAAb,EAC/ByC,GAD+B,CAC3BuO,iBAD2B,EAE/BlK,MAF+B,GAG/BI,QAH+B,CAGtB,KAAK3C,YAAL,CAAkBZ,GAHI,EAGCmE,QAHnC;AAIA,aAAO,KAAKvD,YAAL,YAA6BuE,WAA7B,GACH,IAAIA,WAAJ,CAAgB,KAAKvE,YAAL,CAAkBY,KAAlC,EAAyC8L,yBAAzC,CADG,GAEH3I,cAAc,CAACK,KAAf,CAAqBsI,yBAArB,EAAgDhN,OAAhD,CAFJ;AAGD;AACF;AAED;;;;AA1HF;;AAAA,SA8HSW,eA9HT,GA8HS,yBAAgBoM,iBAAhB,EAA4C/M,OAA5C;QAA4CA;AAAAA,MAAAA,UAAmBpF,eAAO,CAACI;;;AAC5E,KAAU,CAAC+R,iBAAiB,CAACrO,QAAlB,CAA2B5C,IAA3B,CAAX,IAAA0B,SAAS,QAAoC,oBAApC,CAAT,CAAA;;AACA,QAAI,KAAKqE,SAAL,KAAmBhH,iBAAS,CAACiH,WAAjC,EAA8C;AAC5C,aAAO,KAAK5B,WAAZ;AACD,KAFD,MAEO;AACL,UAAM+M,wBAAwB,GAAG,IAAIvK,QAAJ,CAAa3G,GAAb,EAAkByC,GAAlB,CAAsBuO,iBAAtB,EAAyC9J,QAAzC,CAAkD,KAAK/C,WAAL,CAAiBR,GAAnE,EAAwEmE,QAAzG;AACA,aAAO,KAAK3D,WAAL,YAA4B2E,WAA5B,GACH,IAAIA,WAAJ,CAAgB,KAAK3E,WAAL,CAAiBgB,KAAjC,EAAwC+L,wBAAxC,CADG,GAEH5I,cAAc,CAACK,KAAf,CAAqBuI,wBAArB,EAA+CjN,OAA/C,CAFJ;AAGD;AACF;AAED;;;;;;;;;;;;;;AA1IF;;AAAA,QAwJgBkN,gBAxJhB,GAwJS,0BACL7H,KADK,EAEL8H,gBAFK,EAGLC,WAHK;AAMLC,EAAAA,YANK,EAOLC,gBAPK,EAQLC,UARK;kCAIkD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBC;AAAAA,MAAAA,mBAAmCH;;;QACnCI;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAUlI,KAAK,CAACrG,MAAN,GAAe,CAAzB,KAAAxB,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,MAAUiQ,OAAO,GAAG,CAApB,KAAAjQ,SAAS,QAAc,UAAd,CAAT,CAAA;AACA,MAAU8P,gBAAgB,KAAKH,gBAArB,IAAyCE,YAAY,CAACrO,MAAb,GAAsB,CAAzE,KAAAxB,SAAS,QAAmE,mBAAnE,CAAT,CAAA;AACA,QAAMwC,OAAO,GACXmN,gBAAgB,YAAYtI,WAA5B,GACIsI,gBAAgB,CAACjM,KAAjB,CAAuBlB,OAD3B,GAEIoN,WAAW,YAAYlH,KAAvB,GACAkH,WAAW,CAACpN,OADZ,GAEA8G,SALN;AAMA,MAAU9G,OAAO,KAAK8G,SAAtB,KAAAtJ,SAAS,QAAwB,UAAxB,CAAT,CAAA;AAEA,QAAMkD,QAAQ,GAAG0L,aAAa,CAACe,gBAAD,EAAmBnN,OAAnB,CAA9B;AACA,QAAM0N,QAAQ,GAAGrB,eAAe,CAACe,WAAD,EAAcpN,OAAd,CAAhC;;AACA,SAAK,IAAIuF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACrG,MAA1B,EAAkCuG,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACC,MAAL,CAAYX,MAAZ,CAAmBpE,QAAQ,CAACQ,KAA5B,CAAD,IAAuC,CAACsE,IAAI,CAAC2B,MAAL,CAAYrC,MAAZ,CAAmBpE,QAAQ,CAACQ,KAA5B,CAA5C,EAAgF;AAChF,UAAIsE,IAAI,CAACE,QAAL,CAAcvC,OAAd,CAAsBrH,IAAtB,KAA+B0J,IAAI,CAACG,QAAL,CAAcxC,OAAd,CAAsBrH,IAAtB,CAAnC,EAAgE;AAEhE,UAAI+E,SAAsB,SAA1B;;AACA,UAAI;AACF;;AADE,qCACa2E,IAAI,CAACgC,eAAL,CAAqB9G,QAArB,EAA+BV,OAA/B,CADb;;AACAa,QAAAA,SADA;AAEH,OAFD,CAEE,OAAO9C,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAAC4P,8BAAV,EAA0C;AACxC;AACD;;AACD,cAAM5P,KAAN;AACD,OAfoC;;;AAiBrC,UAAI8C,SAAS,CAACK,KAAV,CAAgB4D,MAAhB,CAAuB4I,QAAvB,CAAJ,EAAsC;AACpC9O,QAAAA,YAAY,CACV2O,UADU,EAEV,IAAIjB,KAAJ,CACE,IAAInB,KAAJ,WAAckC,YAAd,GAA4B7H,IAA5B,IAAmC8H,gBAAgB,CAACnN,QAApD,EAA8DiN,WAA9D,CADF,EAEEE,gBAFF,EAGEzS,iBAAS,CAACiH,WAHZ,EAIE9B,OAJF,CAFU,EAQVwN,aARU,EASVvB,eATU,CAAZ;AAWD,OAZD,MAYO,IAAIwB,OAAO,GAAG,CAAV,IAAepI,KAAK,CAACrG,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM4O,sBAAsB,GAAGvI,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeL,CAAf,EAAkBsI,MAAlB,CAAyBxI,KAAK,CAACO,KAAN,CAAYL,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAACrG,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1CsN,QAAAA,KAAK,CAACY,gBAAN,CACEU,sBADF,EAEE/M,SAFF,EAGEuM,WAHF,EAIE;AACEI,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJF,YAQMJ,YARN,GAQoB7H,IARpB,IASE8H,gBATF,EAUEC,UAVF;AAYD;AACF;;AAED,WAAOA,UAAP;AACD;AAED;;;;;;;;;;;;;;;AAlOF;;AAAA,QAiPgBO,iBAjPhB,GAiPS,2BACLzI,KADK,EAEL0I,UAFK,EAGLC,iBAHK;AAMLX,EAAAA,YANK,EAOLY,iBAPK,EAQLV,UARK;oCAIkD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAE/BJ;AAAAA,MAAAA,eAAuB;;;QACvBY;AAAAA,MAAAA,oBAAoCD;;;QACpCT;AAAAA,MAAAA,aAAsB;;;AAEtB,MAAUlI,KAAK,CAACrG,MAAN,GAAe,CAAzB,KAAAxB,SAAS,QAAmB,OAAnB,CAAT,CAAA;AACA,MAAUiQ,OAAO,GAAG,CAApB,KAAAjQ,SAAS,QAAc,UAAd,CAAT,CAAA;AACA,MAAUyQ,iBAAiB,KAAKD,iBAAtB,IAA2CX,YAAY,CAACrO,MAAb,GAAsB,CAA3E,KAAAxB,SAAS,QAAqE,mBAArE,CAAT,CAAA;AACA,QAAMwC,OAAO,GACXgO,iBAAiB,YAAYnJ,WAA7B,GACImJ,iBAAiB,CAAC9M,KAAlB,CAAwBlB,OAD5B,GAEI+N,UAAU,YAAY7H,KAAtB,GACA6H,UAAU,CAAC/N,OADX,GAEA8G,SALN;AAMA,MAAU9G,OAAO,KAAK8G,SAAtB,KAAAtJ,SAAS,QAAwB,UAAxB,CAAT,CAAA;AAEA,QAAMqD,SAAS,GAAGuL,aAAa,CAAC4B,iBAAD,EAAoBhO,OAApB,CAA/B;AACA,QAAMkO,OAAO,GAAG7B,eAAe,CAAC0B,UAAD,EAAa/N,OAAb,CAA/B;;AACA,SAAK,IAAIuF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACrG,MAA1B,EAAkCuG,CAAC,EAAnC,EAAuC;AACrC,UAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;AAGrC,UAAI,CAACC,IAAI,CAACC,MAAL,CAAYX,MAAZ,CAAmBjE,SAAS,CAACK,KAA7B,CAAD,IAAwC,CAACsE,IAAI,CAAC2B,MAAL,CAAYrC,MAAZ,CAAmBjE,SAAS,CAACK,KAA7B,CAA7C,EAAkF;AAClF,UAAIsE,IAAI,CAACE,QAAL,CAAcvC,OAAd,CAAsBrH,IAAtB,KAA+B0J,IAAI,CAACG,QAAL,CAAcxC,OAAd,CAAsBrH,IAAtB,CAAnC,EAAgE;AAEhE,UAAI4E,QAAqB,SAAzB;;AACA,UAAI;AACF;;AADE,oCACY8E,IAAI,CAACoC,cAAL,CAAoB/G,SAApB,EAA+Bb,OAA/B,CADZ;;AACAU,QAAAA,QADA;AAEH,OAFD,CAEE,OAAO3C,KAAP,EAAc;AACd;AACA,YAAIA,KAAK,CAACoQ,2BAAV,EAAuC;AACrC;AACD;;AACD,cAAMpQ,KAAN;AACD,OAfoC;;;AAiBrC,UAAI2C,QAAQ,CAACQ,KAAT,CAAe4D,MAAf,CAAsBoJ,OAAtB,CAAJ,EAAoC;AAClCtP,QAAAA,YAAY,CACV2O,UADU,EAEV,IAAIjB,KAAJ,CACE,IAAInB,KAAJ,EAAW3F,IAAX,SAAoB6H,YAApB,GAAmCU,UAAnC,EAA+CE,iBAAiB,CAAC9N,QAAjE,CADF,EAEE8N,iBAFF,EAGEpT,iBAAS,CAACkH,YAHZ,EAIE/B,OAJF,CAFU,EAQVwN,aARU,EASVvB,eATU,CAAZ;AAWD,OAZD,MAYO,IAAIwB,OAAO,GAAG,CAAV,IAAepI,KAAK,CAACrG,MAAN,GAAe,CAAlC,EAAqC;AAC1C,YAAM4O,sBAAsB,GAAGvI,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeL,CAAf,EAAkBsI,MAAlB,CAAyBxI,KAAK,CAACO,KAAN,CAAYL,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAACrG,MAAzB,CAAzB,CAA/B,CAD0C;;AAI1CsN,QAAAA,KAAK,CAACwB,iBAAN,CACEF,sBADF,EAEEG,UAFF,EAGErN,QAHF,EAIE;AACE8M,UAAAA,aAAa,EAAbA,aADF;AAEEC,UAAAA,OAAO,EAAEA,OAAO,GAAG;AAFrB,SAJF,GAQGjI,IARH,SAQY6H,YARZ,GASEY,iBATF,EAUEV,UAVF;AAYD;AACF;;AAED,WAAOA,UAAP;AACD,GAzTH;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}